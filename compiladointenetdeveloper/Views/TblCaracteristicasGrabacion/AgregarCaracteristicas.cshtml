
@model iveCincoFrame.Models.CaracteristicasGrabacion.CaracteristicasList
@{
    Layout = null;
}

<div class="row">
    <div class="mb-3"><button type="button" class="btn btn-primary btn-lg" onclick="location.href='@Url.Action("Index", "TblCaracteristicasGrabacion")'" style="box-shadow: 0 0.15rem 1.75rem 0 rgb(33 40 50 / 15%);"><i class="align-middle me-2 fas fa-fw fa-arrow-alt-circle-left"></i></button></div>
    <div class="card-actions bg-success-dark text-white"><i class="align-middle me-2 fas fa-fw fa-exclamation-triangle"></i> Agregar Caracteristicas</div>

    <div class="col-xl-12 card" style="box-shadow: 0 0.15rem 1.75rem 0 rgb(33 40 50 / 15%);">
        <!-- Account details card-->

        <div class="card-body">
            <h3>Caracteristicas de la Sucursal</h3>
            <form>
                <!-- Form Row-->
                <div class="row gx-3 mb-3">
                    <!-- Form Group (birthday)-->
                    <div class="col-md-4">
                        <label class="small mb-1" for="idCatUbicaciones">Sucursal</label>
                        @Html.DropDownList("idCatUbicaciones", null, htmlAttributes: new { @class = "form-select flex-grow-1" })
                    </div>
                    <div class="col-md-4">
                        <label class="small mb-1" for="ipDvr">IP del DVR</label>
                        @Html.EditorFor(model => model.ipDvr, new { htmlAttributes = new { @class = "form-control", @placeholder = "123456789" } })
                        @Html.ValidationMessageFor(model => model.ipDvr, "", new { @class = "text-danger" })
                    </div>
                    <!-- Form Group (first name)-->
                    <div class="col-md-4">
                        <label class="small mb-1" for="marcaDvr">Marca del DVR</label>
                        @Html.EditorFor(model => model.marcaDvr, new { htmlAttributes = new { @class = "form-control", @placeholder = "Escribe la Marca" } })
                        @Html.ValidationMessageFor(model => model.marcaDvr, "", new { @class = "text-danger" })
                    </div>
                    <!-- Form Group (first name)-->

                </div>
                <!-- Form Row-->
                <div class="row gx-3 mb-3">
                    <!-- Form Group (last name)-->
                    <div class="col-md-4">
                        <label class="small mb-1" for="cantidadCamarasInstaladas">Cantidad de Camaras Instaladas</label>
                        @Html.EditorFor(model => model.cantidadCamarasInstaladas, new { htmlAttributes = new { @class = "form-control", @placeholder = "0" } })
                        @Html.ValidationMessageFor(model => model.cantidadCamarasInstaladas, "", new { @class = "text-danger" })
                    </div>
                    <!-- Form Group (first name)-->
                    <div class="col-md-4">
                        <label class="small mb-1" for="cantidadDiscosDuros">Cantidad de discos Duros</label>
                        @Html.EditorFor(model => model.cantidadDiscosDuros, new { htmlAttributes = new { @class = "form-control", @placeholder = "0" } })
                        @Html.ValidationMessageFor(model => model.cantidadDiscosDuros, "", new { @class = "text-danger" })
                    </div>
                    <!-- Form Group (last name)-->
                    <div class="col-md-4">
                        <label class="small mb-1" for="capacidadDvr">Capacidad del DVR</label>
                        @Html.EditorFor(model => model.capacidadDvr, new { htmlAttributes = new { @class = "form-control", @placeholder = "Ejemplo: 500GB" } })
                        @Html.ValidationMessageFor(model => model.capacidadDvr, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row gx-3 mb-3">
                    <!-- Form Group (first name)-->
                    <div class="col-md-4">
                        <label class="small mb-1" for="tiempoAlmacenamiento">Tiempo de Almacenamiento (Dias)</label>
                        @Html.EditorFor(model => model.tiempoAlmacenamiento, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.tiempoAlmacenamiento, "", new { @class = "text-danger" })
                    </div>
                    <!-- Form Group (last name)-->
                    <div class="col-md-4">
                        <label class="small mb-1" for="usuarioDvr">Usuario del DVR</label>
                        @Html.EditorFor(model => model.usuarioDvr, new { htmlAttributes = new { @class = "form-control", @placeholder = "Usuario" } })
                        @Html.ValidationMessageFor(model => model.usuarioDvr, "", new { @class = "text-danger" })
                    </div>
                    <!-- Form Group (last name)-->
                    <div class="col-md-4">
                        <label class="small mb-1" for="usuarioDvr">Clave del DVR</label>
                        @Html.EditorFor(model => model.claveDvr, new { htmlAttributes = new { @class = "form-control", @placeholder = "••••••••" } })
                        @Html.ValidationMessageFor(model => model.claveDvr, "", new { @class = "text-danger" })
                    </div>
                </div>
                <!-- Form Row  -->
                <div class="row  mb-3">
                    <!-- Form Group (organization name)-->
                    <div class="col-md-4">
                        <label class="small mb-1" for="diferenciaDeTiempo">Diferencia de Tiempo</label>
                        @Html.EditorFor(model => model.diferenciaDeTiempo, new { htmlAttributes = new { @class = "form-control", @placeholder = "00" } })
                        @Html.ValidationMessageFor(model => model.diferenciaDeTiempo, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <label class="small mb-1" for="canalesDvr">Estado de Tiempo</label>
                        @Html.DropDownList("idCatEstadosTiempo", null, htmlAttributes: new { @class = "form-select flex-grow-1" })
                        @Html.ValidationMessageFor(model => model.idCatEstadosTiempo, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <label class="small mb-1" for="canalesDvr">Canales del DVR</label>
                        @Html.EditorFor(model => model.canalesDvr, new { htmlAttributes = new { @class = "form-control", @placeholder = "0" } })
                        @Html.ValidationMessageFor(model => model.canalesDvr, "", new { @class = "text-danger" })
                    </div>
                </div>
                <!-- Form Row  -->
                <div class="row  mb-3">
                    <!-- Form Group (organization name)-->
                    <label class="small mb-1" for="canalesDvr">Observaciones</label>
                    @Html.TextAreaFor(model => model.Observaciones, new { htmlAttributes = new { @class = "form-control", @placeholder = "Observaciones" } })
                </div>
                <div class="row  mb-3">
                    <button type="button" class="btn btn-primary btn-lg" id="Guardar">Guardar<i class="align-middle me-2 fas fa-fw fa-check"></i></button>
                    <!-- Form Group (birthday)-->
                </div>
            </form>
        </div>
    </div>
</div>
<script>
$(document).ready(function () {
    $(document).on('click', '#Guardar', function () {
        var ipDvr = $('#ipDvr').val();
        var marcaDvr = $('#marcaDvr').val();
        var canalesDvr = $('#canalesDvr').val();
        var cantidadCamarasInstaladas = $('#cantidadCamarasInstaladas').val();
        var cantidadDiscosDuros = $('#cantidadDiscosDuros').val();
        var capacidadDvr = $('#capacidadDvr').val();
        var tiempoAlmacenamiento = $('#tiempoAlmacenamiento').val();
        var usuarioDvr = $('#usuarioDvr').val();
        var claveDvr = $('#claveDvr').val();
        var diferenciaDeTiempo = $('#diferenciaDeTiempo').val();
        var idCatUbicaciones = $('#idCatUbicaciones').val();
        var idCatEstadosTiempo = $('#idCatEstadosTiempo').val();
        var Observaciones = $('#Observaciones').val();



        var oCaracteristicas = {
            ipDvr: ipDvr,
            marcaDvr: marcaDvr,
            canalesDvr: canalesDvr,
            cantidadCamarasInstaladas: cantidadCamarasInstaladas,
            cantidadDiscosDuros: cantidadDiscosDuros,
            capacidadDvr: capacidadDvr,
            tiempoAlmacenamiento: tiempoAlmacenamiento,
            usuarioDvr: usuarioDvr,
            claveDvr: claveDvr,
            diferenciaDeTiempo: diferenciaDeTiempo,
            idCatUbicaciones: idCatUbicaciones,
            idCatEstadosTiempo: idCatEstadosTiempo,
            Observaciones: Observaciones
        };
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GuardarCaracteristicas", "TblCaracteristicasGrabacion")',
            data: oCaracteristicas,
            beforeSend: function (response) {
            },
            success: function (response) {
            //console.log(response);
            if (response.data.Codigo == 0) {
                function toasterOptions() {
                    toastr.options = {
                    "closeButton": false,
                    "debug": false,
                    "newestOnTop": false,
                    "progressBar": true,
                    "positionClass": "toast-bottom-right",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": "5000",
                    "extendedTimeOut": "1000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                    };
                };
                toasterOptions();
                toastr.success(response.data.Descripcion);
                cargardetalle();
                cargar();
            }
            else
            {
                setTimeout(() => {
                    Swal.fire({
                    title: "Ocurrio un problema",
                    text: response.data.Descripcion,
                    icon: 'error',
                    showCancelButton: false,
                    confirmButtonColor: '#153d77',
                    cancelButtonColor: false,
                    confirmButtonText: 'Aceptar'
                    }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.reload();
                        }
                    })
                    }, 1000);
                }
            }
        });
        return false;

        function cargar() {
            let timerInterval
            Swal.fire({
                title: 'Actualizando Registros!',
                html: 'Tiempo restante <b></b> espere profavor.',
                timer: 1000,
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading()
                    const b = Swal.getHtmlContainer().querySelector('b')
                    timerInterval = setInterval(() => {
                        b.textContent = Swal.getTimerLeft()
                    }, 100)
                },
                willClose: () => {
                    clearInterval(timerInterval)
                }
            }).then((result) => {
                /* Read more about handling dismissals below */
                if (result.dismiss === Swal.DismissReason.timer) {
                    console.log('I was closed by the timer')
                }
            })
        }

        /*funsion listar usuarios*/
        function cargardetalle() {
        $.ajax({
            type: 'GET',
            url:  '@Url.Action("CaracteristicasIndex", "TblCaracteristicasGrabacion")',
            beforeSend: function (response) {},
            success: function (response) {
                $('#transac-caracteristicas').html('');
                $('#transac-caracteristicas').html(response);
            },
            });
            return false;
        }
    });

});
</script>