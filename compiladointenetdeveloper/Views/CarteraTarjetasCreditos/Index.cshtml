
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layaut_Intranet.cshtml";
}
<link href="~/CSS/StyleUpload.css" rel="stylesheet">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
<div class="container-drop">
    <div ondrop="dropHandler(event)" ondragover="dragOverHandler(event)" class="row borders rounded-3 m-2 p-5 gap-2">
        <span class="material-symbols-outlined">upload_file</span>
        <label class="text-center p-0 m-0 fs-3 fw-bold" for="uploadFile">Arrastra y suelta el archivo aquí</label>

        <div class="col-sm-4 m-auto text-center">
            <label class="txt-color pb-2">Archivos Soportados | Excel (.xls, .xlsx).</label>
            <input type="file"
                   class="form-control"
                   name="uploadFile"
                   id="uploadFile" accept=".xlsx, xls" />
            <label class="txt-color pt-2">Maximum Size: 10MB</label>
        </div>
    </div>
</div>
<div class=" row mx-1">
    <button class="btn btn-primary btn-lg" id="enviar-Solicitud" style="box-shadow: 0 0.15rem 1.75rem 0 rgb(33 40 50 / 15%); background: #153d77;">Publicar Archivo</button>
</div>
<div class="d-flex justify-content-between mt-3 mb-3">
    <div class="col-4 text-white">
        <div class="input-group input-group-lg mb-3">
            <label class="text-white">.</label>
        </div>
    </div>
    <div class="col-4">
        <div class="input-group input-group-lg mb-3">
            <input type="text" id="filtro" class="form-control" placeholder="Filtrar Registros">
            <span class="input-group-text">
                <i class="align-middle me-2 fas fa-fw fa-search"></i>
            </span>
        </div>
    </div>
    <div class="col-4 text-end mx-1">
        <button class="btn btn-danger btn-lg me-2" id="eliminar-todo"><i class="align-middle me-2 fas fa-fw fa-trash-alt"></i></button>
    </div>
</div>
<div class="row px-1 px-sm-1 px-md-3 px-lg-4">
    <table class="table table-wrapper table-bordered" id="datatables-reponsive">
        <thead>
            <tr class="small">
                <th class="filtro-col text-start" style="white-space: nowrap;">Region</th>
                <th class="filtro-col text-center" style="white-space: nowrap;">Sucursal</th>
                <th class="filtro-col table-primary" style="white-space: nowrap;">Cuentas Q</th>
                <th class="filtro-col text-center table-primary" style="white-space: nowrap;">Saldo Q</th>
                <th class="filtro-col text-center table-primary" style="white-space: nowrap;">Cuentas Q</th>
                <th class="filtro-col text-center table-primary" style="white-space: nowrap;">Mora Q</th>
                <th class="filtro-col text-center table-success" style="white-space: nowrap;">Saldo $</th>
                <th class="filtro-col text-center table-success" style="white-space: nowrap;">Mora $</th>
                <th class="filtro-col text-center table-light" style="white-space: nowrap;">Cartera</th>
                <th class="filtro-col text-center table-light" style="white-space: nowrap;">Cuentas</th>
                <th class="filtro-col text-center table-warning" style="white-space: nowrap;">Mora</th>
            </tr>
        </thead>
        <tbody class="small" id="tbody-asignaciones">
        </tbody>
    </table>


</div>


<script>
    function dropHandler(ev) {
        // Prevenir comportamiento predeterminado (cargar archivo en el navegador)
        ev.preventDefault();

        // Obtener archivo arrastrado
        var file = ev.dataTransfer.files[0];

        // Comprobar que es un archivo válido de Excel
        if (file.type !== "application/vnd.ms-excel" && file.type !== "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
            alert("Solo se permiten archivos de Excel en formato .xls o .xlsx");
            return;
        }

        // Comprobar que el archivo no excede el tamaño máximo
        if (file.size > 10 * 1024 * 1024) {
            alert("El archivo no debe exceder los 10MB");
            return;
        }

        // Crear una nueva instancia de FileList con el archivo
        var fileList = new DataTransfer();
        fileList.items.add(file);

        // Asignar el FileList al input de tipo file
        document.getElementById("uploadFile").files = fileList.files;

        // Remover la clase de CSS que activa la animación
        ev.currentTarget.classList.remove("dragging");
    }
    function dragOverHandler(ev) {
        // Prevenir comportamiento predeterminado (cargar archivo en el navegador)
        ev.preventDefault();
        // Agregar la clase de CSS que activa la animación
        ev.currentTarget.classList.add("dragging");
    }
    document.addEventListener('DOMContentLoaded', function () {
        function toasterOptions() {
            toastr.options = {
                "closeButton": false,
                "debug": false,
                "newestOnTop": false,
                "progressBar": true,
                "positionClass": "toast-bottom-right",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            };
        }
        $('#filtro').on('input', function () {
            var filtro = $(this).val().toLowerCase();
            $('table tbody tr:not(.total-fila)').each(function () {
                var texto = $(this).text().toLowerCase();
                if (texto.indexOf(filtro) !== -1) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            }).promise().done(function () {

                calcularTotales();
            });
        });
        function calcularTotales() {
            // Obtener todas las filas visibles de la tabla
            //var filas = $("#tbody-asignaciones tr:visible");
            var filas = $("#tbody-asignaciones tr:visible").not(".total-fila");

            // Obtener el total de la columna "CantidadMetaMensual"
            var cantidadCuentasSaldosQuetzales = 0;
            filas.each(function () {
                var cantidad = parseInt($(this).find("td:nth-child(3)").text());
                if (!isNaN(cantidad)) {
                    cantidadCuentasSaldosQuetzales += cantidad;
                }
            });
            // Obtener el total de la columna "MontoMetaMensual"
            var saldosQuetzales = 0;
            filas.each(function () {
                var monto = parseFloat($(this).find("td:nth-child(4)").text().replace(/[\sQ,]/g, ''));
                if (!isNaN(monto)) {
                    saldosQuetzales += monto;
                }
            });
            // Obtener el total de la columna "MontoMetaMensual"
            var cantidadCuentasMoraQuetzales = 0;
            filas.each(function () {
                var cantidad = parseInt($(this).find("td:nth-child(5)").text());
                if (!isNaN(cantidad)) {
                    cantidadCuentasMoraQuetzales += cantidad;
                }
            });
            // Obtener el total de la columna "MontoMetaMensual"
            var moraQuetzales = 0;
            filas.each(function () {
                var monto = parseFloat($(this).find("td:nth-child(6)").text().replace(/[\sQ,]/g, ''));
                if (!isNaN(monto)) {
                    moraQuetzales += monto;
                }
            });
            // Obtener el total de la columna "MontoMetaMensual"
            var saldosDolares = 0;
            filas.each(function () {
                var monto = parseFloat($(this).find("td:nth-child(7)").text().replace(/[\s$,]/g, ''));
                if (!isNaN(monto)) {
                    saldosDolares += monto;
                }
            });
            // Obtener el total de la columna "MontoMetaMensual"
            var moraDolares = 0;
            filas.each(function () {
                var monto = parseFloat($(this).find("td:nth-child(8)").text().replace(/[\s$,]/g, ''));
                if (!isNaN(monto)) {
                    moraDolares += monto;
                }
            });
            // Obtener el total de la columna "MontoMetaMensual"
            var totalCartera = 0;
            filas.each(function () {
                var monto = parseFloat($(this).find("td:nth-child(9)").text().replace(/[\sQ,]/g, ''));
                if (!isNaN(monto)) {
                    totalCartera += monto;
                }
            });
            // Obtener el total de la columna "MontoMetaMensual"
            var totalCuentasMora = 0;
            filas.each(function () {
                var cantidad = parseInt($(this).find("td:nth-child(10)").text());
                if (!isNaN(cantidad)) {
                    totalCuentasMora += cantidad;
                }
            });
            // Obtener el total de la columna "MontoMetaMensual"
            var totalMora = 0;
            filas.each(function () {
                var monto = parseFloat($(this).find("td:nth-child(11)").text().replace(/[\sQ,]/g, ''));
                if (!isNaN(monto)) {
                    totalMora += monto;
                }
            });
            var totalFila = $("#tbody-asignaciones").find(".total-fila");
            if (totalFila.length) {
                // Si ya existe, actualizar los totales
                totalFila.find("td:nth-child(3)").text(cantidadCuentasSaldosQuetzales.toLocaleString());
                totalFila.find("td:nth-child(4)").text(saldosQuetzales.toLocaleString('es-GT', { style: 'currency', currency: 'GTQ' }));
                totalFila.find("td:nth-child(5)").text(cantidadCuentasMoraQuetzales.toLocaleString());
                totalFila.find("td:nth-child(6)").text(moraQuetzales.toLocaleString('es-GT', { style: 'currency', currency: 'GTQ' }));
                totalFila.find("td:nth-child(7)").text(saldosDolares.toLocaleString('en-US', { style: 'currency', currency: 'USD' }));
                totalFila.find("td:nth-child(8)").text(moraDolares.toLocaleString('en-US', { style: 'currency', currency: 'USD' }));
                totalFila.find("td:nth-child(9)").text(totalCartera.toLocaleString('es-GT', { style: 'currency', currency: 'GTQ' }));
                totalFila.find("td:nth-child(10)").text(totalCuentasMora.toLocaleString());
                totalFila.find("td:nth-child(11)").text(totalMora.toLocaleString('es-GT', { style: 'currency', currency: 'GTQ' }));
            } else {
                // Si no existe, agregar una nueva fila de totales

            }
        }
        function getCarterasCreditos(url, data, beforeSendCallback) {
            // show loading animation
            // show loading animation
            let timerInterval
            Swal.fire({
                title: 'Cargando los registros',
                html: 'Por favor espere mientras obtenemos la informacion',
                allowOutsideClick: false,
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading()
                },
                willClose: () => {
                    clearInterval(timerInterval)
                }
            }).then((result) => {
                /* Read more about handling dismissals below */
                if (result.dismiss === Swal.DismissReason.timer) {
                    console.log('I was closed by the timer')
                }
            })
            // Configurar opciones de solicitud
            // aqui se declara el objeto opciones el cual se enviara dentro de la funcion enviarSolicitud
            let opciones = {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            };
            // Si se proporciona una función beforeSendCallback, llámala antes de enviar la solicitud
            if (beforeSendCallback && typeof beforeSendCallback === 'function') {
                opciones = beforeSendCallback(opciones);
            }
            // Enviar solicitud
            return fetch(url, opciones)
                .then(function (response) {
                    if (!response.ok) {
                        throw new Error('Error al enviar la solicitud');
                    }
                    swal.close();
                    // Ocultar animación de carga
                    // document.getElementById('loader').style.display = 'none';

                    return response.json();
                })
                .catch(function (error) {
                    console.error(error);
                    toastr.success('ocurrio un error inesperado al cargar la informacion');
                    swal.close();
                    // Ocultar animación de carga
                    //document.getElementById('loader').style.display = 'none';
                });
        }
        function pintarDatosEnTabla(data) {
            return new Promise((resolve, reject) => {

                $("#tbody-asignaciones").html('');//limiar el tbody
                $.each(data, function (key, item) {
                    var html = '';
                    html += '<tr>';
                    html += '<td>' + item.Region + '</td>';
                    html += '<td>' + item.Sucursal + '</td>';
                    html += '<td class="text-center table-primary">' + item.cantidadCuentasSaldosQuetzales + '</td>';
                    html += '<td class="table-primary">' + item.saldosQuetzales + '</td>';
                    html += '<td class="text-center table-primary">' + item.cantidadCuentasMoraQuetzales + '</td>';
                    html += '<td class="table-primary">' + item.moraQuetzales + '</td>';
                    html += '<td class="table-success">' + item.saldosDolares + '</td>';
                    html += '<td class="table-success">' + item.moraDolares + '</td>';
                    html += '<td class="fw-bold">' + item.totalCartera + '</td>';
                    html += '<td class="fw-bold text-center">' + item.totalCuentasMora + '</td>';
                    html += '<td class="fw-bold table-warning">' + item.totalMora + '</td>';
                    $("#tbody-asignaciones").append(html);
                });
                // Resolver la promesa cuando se hayan pintado los datos en la tabla
                resolve();
                /*Despues de resolver la promesa se agrega una ultmima fila*/
                var html = '';
                html += '<tr class="fw-bold total-fila">';
                html += '<td class="table-dark">Totales:</td>';
                html += '<td class="table-dark"></td>';
                html += '<td class="text-center table-dark">0</td>';
                html += '<td class="table-dark">Q0.00</td>';
                html += '<td class="text-center table-dark">0</td>';
                html += '<td class="table-dark">Q0.00</td>';
                html += '<td class="table-dark">$0.00</td>';
                html += '<td class="table-dark">$0.00</td>';
                html += '<td class="table-dark">Q0.00</td>';
                html += '<td class="text-center table-dark">0</td>';
                html += '<td class="table-dark">Q0.00</td>';
                html += '</tr>';
                $("#tbody-asignaciones").append(html);
                // Calcular los totales
                calcularTotales();
            });
        }
         var url = '@Url.Action("GetCarteraCredito", "CarteraTarjetasCreditos")';
        getCarterasCreditos(url, function (opciones) {

                            return opciones;
                        })
                        .then(function (respuesta) {

                                console.log(respuesta);
                                pintarDatosEnTabla(respuesta).then(() => {
                                    swal.close();
                                });
                        })
                        .catch(function (error) {
                                console.error(error);
                        });

    $("#enviar-Solicitud").on('click', function (e) {
        /*funcion para enviar la solcitud*/
        function enviarArchivo(url, data, beforeSendCallback) {
            // show loading animation
            // show loading animation
            let timerInterval
            Swal.fire({
                title: 'Publicando Archivo...',
                html: 'Mensaje: Por favor espere mientras se realiza este proceso',
                allowOutsideClick: false,
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading()
                },
                willClose: () => {
                    clearInterval(timerInterval)
                }
            }).then((result) => {
                /* Read more about handling dismissals below */
                if (result.dismiss === Swal.DismissReason.timer) {
                    console.log('I was closed by the timer')
                }
            })
            // Configurar opciones de solicitud
            // aqui se declara el objeto opciones el cual se enviara dentro de la funcion enviarSolicitud
            let opciones = {
                method: 'POST',
                body: data
            };
            // Si se proporciona una función beforeSendCallback, llámala antes de enviar la solicitud
            if (beforeSendCallback && typeof beforeSendCallback === 'function') {
                opciones = beforeSendCallback(opciones);
            }
            // Enviar solicitud
            return fetch(url, opciones)
                .then(function (response) {
                    if (!response.ok) {
                        throw new Error('Error al enviar la solicitud');

                    }
                    swal.close();

                    return response.json();
                })
                .catch(function (error) {

                    toastr.error('ocurrio un error inesperado al enviar la solicitud fetch');
                    swal.close();
                });
        }
        /*finaliza la funcion*/
        /*se declaran las varibles a enviar en la solicitud*/
        var file = document.getElementById("uploadFile").files[0];
        // Verificar que se haya cargado un archivo
        if (!file) {
            alert("Debe seleccionar un archivo para enviar.");
            return;
        }
        // Crear instancia de FormData
        var formData = new FormData();
        // Agregar el archivo al FormData
        formData.append("archivo", file);

        /*instrucciones que evitan que se envie varias veces la peticion bloquea el boton*/
        e.preventDefault();
        var btn = $(this);
        if (!btn.hasClass('disabled')) {
            //se llama a la funion enviarSolicitud
            let url = '@Url.Action("GuardarArchivo", "CarteraTarjetasCreditos")';
            enviarArchivo(url, formData, function (opciones) {

                return opciones;
            })
            .then(function (respuesta) {

                    console.log(respuesta);
                    if (respuesta.Codigo === 1) {
                        swal.close();
                        const fileInput = document.getElementById('uploadFile');
                        fileInput.value = null;
                        toasterOptions();
                        toastr.success(respuesta.Descripcion);
                        console.log(respuesta)
                        //se llama a la funion enviarSolicitud
                        var url = '@Url.Action("GetCarteraCredito", "CarteraTarjetasCreditos")';
                        getCarterasCreditos(url, function (opciones) {

                            return opciones;
                        })
                        .then(function (respuesta) {

                                console.log(respuesta);
                                pintarDatosEnTabla(respuesta).then(() => {
                                    swal.close();
                                });
                        })
                        .catch(function (error) {
                            const fileInput = document.getElementById('uploadFile');
                            fileInput.value = null;
                                console.error(error);
                        });

                    } else {
                        const fileInput = document.getElementById('uploadFile');
                        fileInput.value = null;
                        toasterOptions();
                        toastr.error(respuesta.Descripcion);
                        swal.close();
                    }
            })
            .catch(function (error) {
                const fileInput = document.getElementById('uploadFile');
                fileInput.value = null;
                console.log(error);
                toasterOptions();
                toastr.error(error);
            });
        }
        else {
            return false;
        }
    });
    $("#eliminar-todo").on('click', function (e) {
        /*funcion para enviar la solcitud*/
        function eliminarDatos(url, beforeSendCallback) {
            // show loading animation
            // show loading animation
            let timerInterval
            Swal.fire({
                title: 'Eliminando Registros...',
                html: 'Mensaje: Por favor espere mientras se eliminan los registros',
                allowOutsideClick: false,
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading()
                },
                willClose: () => {
                    clearInterval(timerInterval)
                }
            }).then((result) => {
                /* Read more about handling dismissals below */
                if (result.dismiss === Swal.DismissReason.timer) {
                    console.log('I was closed by the timer')
                }
            })
            // Configurar opciones de solicitud
            // aqui se declara el objeto opciones el cual se enviara dentro de la funcion enviarSolicitud
            let opciones = {
                method: 'GET'
            };
            // Si se proporciona una función beforeSendCallback, llámala antes de enviar la solicitud
            if (beforeSendCallback && typeof beforeSendCallback === 'function') {
                opciones = beforeSendCallback(opciones);
            }
            // Enviar solicitud
            return fetch(url, opciones)
                .then(function (response) {
                    if (!response.ok) {
                        throw new Error('Error al enviar la solicitud');

                    }
                    swal.close();

                    return response.json();
                })
                .catch(function (error) {

                    toastr.error('ocurrio un error inesperado al enviar la solicitud fetch');
                    swal.close();
                });
        }
        /*finaliza la funcion*/
          //alert(codigo);
          Swal.fire({
            icon: 'warning',
            title: '¿Se borraran todos los registros del dia?',
            showConfirmButton: true,
            confirmButtonText: 'ELIMINAR',
            confirmButtonColor: '#3085d6',
            showCancelButton: true,
            cancelButtonText: 'CANCELAR',
            cancelButtonColor: '#d33',
            buttonsStyling: true,
          }).then((result) => {
            if (result.isConfirmed) {

         /*instrucciones que evitan que se envie varias veces la peticion bloquea el boton*/
            e.preventDefault();
            var btn = $(this);
            if (!btn.hasClass('disabled')) {
                //se llama a la funion enviarSolicitud
                let url = '@Url.Action("Delete", "CarteraTarjetasCreditos")';
                eliminarDatos(url,function (opciones) {

                    return opciones;
                })
                .then(function (respuesta) {

                        console.log(respuesta);
                        if (respuesta.Codigo === 1) {
                            swal.close();
                            const fileInput = document.getElementById('uploadFile');
                            fileInput.value = null;
                            toasterOptions();
                            toastr.success(respuesta.Descripcion);
                            console.log(respuesta)
                            //se llama a la funion enviarSolicitud
                            var url = '@Url.Action("GetCarteraCredito", "CarteraTarjetasCreditos")';
                            getCarterasCreditos(url, function (opciones) {

                                return opciones;
                            })
                            .then(function (respuesta) {

                                    console.log(respuesta);
                                    pintarDatosEnTabla(respuesta).then(() => {
                                        swal.close();
                                    });
                            })
                            .catch(function (error) {
                                    console.log(error);
                            });

                        } else {
                            swal.close();
                            toasterOptions();
                            toastr.error(respuesta.Descripcion);
                        }
                })
                .catch(function (error) {
                    console.log(error);
                    toasterOptions();
                    toastr.error(error);
                });
            }
            else {
                return false;
            }

            }
          });
        });
    });




</script>



