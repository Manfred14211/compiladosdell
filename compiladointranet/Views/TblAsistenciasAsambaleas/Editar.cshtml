@model iveCincoFrame.Models.Asasmblea.AsignacionesAsambelasDto 
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>Intranet | Registro Asamblea</title>

    <!--jquery min-->
    <script src="https://code.jquery.com/jquery-3.6.1.min.js" integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=" crossorigin="anonymous"></script>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <!-- CSS -->
    <link href="~/Content/RecursosAsamblea/style.css" rel="stylesheet">
    <!--iconos fontawesome-->
    <script src="https://kit.fontawesome.com/ac17241314.js" crossorigin="anonymous"></script>
    <!-- FONT -->
    <link href="https://fonts.gstatic.com" rel="preconnect">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,200;1,300;1,400;1,500;1,600&display=swap" rel="stylesheet">
</head>
<body>
    <!-- CONTAINER -->
    <div class="container d-flex align-items-center min-vh-100">
        <div class="row g-0 justify-content-center">
            <!-- TITLE -->
            <div class="col-lg-4 offset-lg-1 mx-0 px-0">
                <div id="title-container">
                    <img class="covid-image" src="~/Content/img/principal minimum.png">
                    <h2>Asamblea 2023</h2>
                    <h3>Registro de Asistencias</h3>
                    <h5 class="text-white">Ingresa el DPI del asociado para validar su ingreso a este evento</h5>
                </div>
            </div>
            <!-- FORMS -->
            <div class="col-lg-7 mx-0 px-0">
                <div class="progress">
                    <div aria-valuemax="100" aria-valuemin="0" aria-valuenow="50" class="progress-bar progress-bar-striped progress-bar-animated bg-danger" role="progressbar" style="width: 0%"></div>
                </div>
                <div id="qbox-container">
                    <div id="steps-container">
                        <div class="step">
                            <div class="form-check ps-0 q-box">

                                @Html.HiddenFor(model => model.idTblAsistenciasAsambaleas)
                                @Html.HiddenFor(model => model.nombres)
                                @Html.HiddenFor(model => model.numeroAsociado)
                                @Html.HiddenFor(model => model.numeroDpi)
                                @Html.HiddenFor(model => model.tipoAsociado)
                                @Html.HiddenFor(model => model.estadoTarjetaCredito)
                                @Html.HiddenFor(model => model.estadoCreditos)
                                @Html.HiddenFor(model => model.telefono)
                                @Html.HiddenFor(model => model.genero)
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.Partial("_MensajeParcial")
                                <div class="q-box__question">
                                    @Html.HiddenFor(model => model.idTblAsistenciasAsambaleas)
                                    @Html.Label("¿Esta interesado en obtener nuestra tarjeta de credito o tarjeta de debito?", new { @class = "form-label" })
                                    <div class="input-group input-group-lg mb-3">
                                        <span class="input-group-text">
                                            <i class="fa-solid fa-id-card-clip"></i>
                                        </span>
                                        @Html.DropDownListFor(m => m.formTarjetaCredito, ViewBag.formTarjetaCredito as SelectList, "Seleccione una opcion", new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.formTarjetaCredito, "", new { @class = "text-danger" })
                                </div>
                                <div class="q-box__question">
                                    @Html.Label("¿Tiene la app movil Cooitzá instalada en su Telefono?", new { @class = "form-label" })
                                    <div class="input-group input-group-lg mb-3">
                                        <span class="input-group-text">
                                            <i class="fa-solid fa-address-card"></i>
                                        </span>
                                        @Html.DropDownListFor(m => m.formAppMovil, ViewBag.formAppMovil as SelectList, "Seleccione una opcion", new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.formAppMovil, "", new { @class = "text-danger" })
                                </div>
                                <div class="q-box__question">
                                    @Html.Label("¿Le interesa obtener un seguro con nostros?", new { @class = "form-label" })
                                    <div class="input-group input-group-lg mb-3">
                                        <span class="input-group-text">
                                            <i class="fa-solid fa-user-tie"></i>
                                        </span>
                                        @Html.DropDownListFor(m => m.formCredito, ViewBag.formCredito as SelectList, "Seleccione una opcion", new { @class = "form-control" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.formCredito, "", new { @class = "text-danger" })
                                </div>
                                <div class="q-box__question">
                                    @Html.Label("¿Le gustaria terner algun plan de inversion - plazo fijo con nosotros o ahorro programado?", new { @class = "form-label" })
                                    <div class="input-group input-group-lg mb-3">
                                        <span class="input-group-text">
                                            <i class="fa-solid fa-user-tie"></i>
                                        </span>
                                        @Html.DropDownListFor(m => m.formZumaPagos, ViewBag.formZumaPagos as SelectList, "Seleccione una opcion", new { @class = "form-control" })
                                        @*@Html.DropDownList("formZumaPagos", null, htmlAttributes: new { @class = "form-control" })*@
                                    </div>
                                    @Html.ValidationMessageFor(model => model.formZumaPagos, "", new { @class = "text-danger" })
                                </div>
                                    @Html.HiddenFor(model => model.firma)
                                <form action="#" name=FORM1 class="mb-0">
                                    <div class="q-box__question">
                                        @Html.Label("Firma del asociado", new { @class = "form-label" })
                                        <div class="form-control">
                                            <table id="myTable" border="1" cellpadding="0" width="500">
                                                <tr>
                                                    <td height="100" width="500">
                                                        <canvas id="cnv" name="cnv" width="500" height="100"></canvas>
                                                    </td>
                                                </tr>
                                            </table>
                                        </div>
                                    </div>
                                    <INPUT TYPE=HIDDEN NAME="bioSigData" class="d-none">
                                    <INPUT TYPE=HIDDEN NAME="sigImgData" class="d-none">
                                    <BR>
                                    <BR>
                                    <TEXTAREA class="d-none" NAME="sigStringData" ROWS="20" COLS="50">SigString: </TEXTAREA>
                                    <TEXTAREA class="d-none" NAME="sigImageData" ROWS="20" COLS="50">Base64 String: </TEXTAREA>
                                </form>
                                <p class="d-none" id="daysUntilExpElement"></p>
                                <p class="d-none" id="SigWebVersion"></p>
                                <p class="d-none" id="SigWebTabletJSVersion"></p>
                                <p class="d-none" id="CertificateExpirationDate"></p>
                                <div class="text-center mt-0">
                                    <div class="btn-group" role="group" aria-label="Basic example">
                                        <button type="button" id="SignBtn" name="SignBtn" value="Sign" onclick="javascript:onSign()" class="btn btn-outline-success btn-lg"><i class="fa-solid fa-pencil"></i></button>
                                        <button type="button" id="button1" name="ClearBtn" value="Clear" onclick="javascript:onClear()" class="btn btn-outline-danger btn-lg"><i class="fa-solid fa-eraser"></i></button>
                                        <button type="button" id="button2" name="DoneBtn" value="Done" onclick="javascript:onDone()" class="btn btn-primary btn-lg">Guardar Firma</button>
                                    </div>
                                </div>
                                <hr />
                                <div class="text-center mt-2">
                                    <div class="btn-group" role="group" aria-label="Basic example">
                                        <button type="submit" class="btn btn-success btn-lg" id="completar">Completar Registro <i class="fa-solid fa-circle-check"></i></button>
                                    </div>
                                </div>
                                <hr />

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Option 1: Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <script src="~/Content/RecursosAsamblea/script.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script type="text/javascript" src="~/Content/RecursosAsamblea/SigWebTablet.js"></script>
    <script type="text/javascript">
    var tmr;

    var resetIsSupported = false;
    var SigWeb_1_6_4_0_IsInstalled = false; //SigWeb 1.6.4.0 and above add the Reset() and GetSigWebVersion functions
    var SigWeb_1_7_0_0_IsInstalled = false; //SigWeb 1.7.0.0 and above add the GetDaysUntilCertificateExpires() function

    window.onload = function () {
        if (IsSigWebInstalled()) {
            var sigWebVer = "";
            try {
                sigWebVer = GetSigWebVersion();
            } catch (err) { console.log("Unable to get SigWeb Version: " + err.message) }

            if (sigWebVer != "") {
                try {
                    SigWeb_1_7_0_0_IsInstalled = isSigWeb_1_7_0_0_Installed(sigWebVer);
                } catch (err) { console.log(err.message) };
                //if SigWeb 1.7.0.0 is installed, then enable corresponding functionality
                if (SigWeb_1_7_0_0_IsInstalled) {

                    resetIsSupported = true;
                    try {
                        var daysUntilCertExpires = GetDaysUntilCertificateExpires();
                        document.getElementById("daysUntilExpElement").innerHTML = "SigWeb Certificate expires in " + daysUntilCertExpires + " days.";
                    } catch (err) { console.log(err.message) };
                    var note = document.getElementById("sigWebVrsnNote");
                    note.innerHTML = "SigWeb 1.7.0 installed";
                } else {
                    try {
                        SigWeb_1_6_4_0_IsInstalled = isSigWeb_1_6_4_0_Installed(sigWebVer);
                        //if SigWeb 1.6.4.0 is installed, then enable corresponding functionality
                    } catch (err) { console.log(err.message) };
                    if (SigWeb_1_6_4_0_IsInstalled) {
                        resetIsSupported = true;
                        var sigweb_link = document.createElement("a");
                        sigweb_link.href = "https://www.topazsystems.com/software/sigweb.exe";
                        sigweb_link.innerHTML = "https://www.topazsystems.com/software/sigweb.exe";

                        //var note = document.getElementById("sigWebVrsnNote");
                        //note.innerHTML = "SigWeb 1.6.4 is installed. Install the newer version of SigWeb from the following link: ";
                        //note.appendChild(sigweb_link);
                    } else {
                        var sigweb_link = document.createElement("a");
                        sigweb_link.href = "https://www.topazsystems.com/software/sigweb.exe";
                        sigweb_link.innerHTML = "https://www.topazsystems.com/software/sigweb.exe";

                        var note = document.getElementById("sigWebVrsnNote");
                        note.innerHTML = "A newer version of SigWeb is available. Please uninstall the currently installed version of SigWeb and then install the new version of SigWeb from the following link: ";
                        note.appendChild(sigweb_link);
                    }
                }
            } else {
                //Older version of SigWeb installed that does not support retrieving the version of SigWeb (Version 1.6.0.2 and older)
                var sigweb_link = document.createElement("a");
                sigweb_link.href = "https://www.topazsystems.com/software/sigweb.exe";
                sigweb_link.innerHTML = "https://www.topazsystems.com/software/sigweb.exe";

                var note = document.getElementById("sigWebVrsnNote");
                note.innerHTML = "A newer version of SigWeb is available. Please uninstall the currently installed version of SigWeb and then install the new version of SigWeb from the following link: ";
                note.appendChild(sigweb_link);
            }
        }
        else {
            alert("Unable to communicate with SigWeb. Please confirm that SigWeb is installed and running on this PC.");
        }
    }

    function isSigWeb_1_6_4_0_Installed(sigWebVer) {
        var minSigWebVersionResetSupport = "1.6.4.0";

        if (isOlderSigWebVersionInstalled(minSigWebVersionResetSupport, sigWebVer)) {
            console.log("SigWeb version 1.6.4.0 or higher not installed.");
            return false;
        }
        return true;
    }

    function isSigWeb_1_7_0_0_Installed(sigWebVer) {
        var minSigWebVersionGetDaysUntilCertificateExpiresSupport = "1.7.0.0";

        if (isOlderSigWebVersionInstalled(minSigWebVersionGetDaysUntilCertificateExpiresSupport, sigWebVer)) {
            console.log("SigWeb version 1.7.0.0 or higher not installed.");
            return false;
        }
        return true;
    }

    function isOlderSigWebVersionInstalled(cmprVer, sigWebVer) {
        return isOlderVersion(cmprVer, sigWebVer);
    }

    function isOlderVersion(oldVer, newVer) {
        const oldParts = oldVer.split('.')
        const newParts = newVer.split('.')
        for (var i = 0; i < newParts.length; i++) {
            const a = parseInt(newParts[i]) || 0
            const b = parseInt(oldParts[i]) || 0
            if (a < b) return true
            if (a > b) return false
        }
        return false;
    }

        function onSign() {
            if (IsSigWebInstalled()) {
                var ctx = document.getElementById('cnv').getContext('2d');
                SetDisplayXSize(500);
                SetDisplayYSize(100);
                SetTabletState(0, tmr);
                SetJustifyMode(0);
                ClearTablet();
                if (tmr == null) {
                    tmr = SetTabletState(1, ctx, 50);
                    document.getElementById('myTable').style.border = '2px solid green'; // Aplica el estilo de borde verde
                } else {
                    SetTabletState(0, tmr);
                    tmr = null;
                    tmr = SetTabletState(1, ctx, 50);
                    /*document.getElementById('myTable').style.border = ''; // Elimina el estilo de borde*/
                }
            } else {
                alert("No se puede comunicar con SigWeb. Confirme que SigWeb está instalado y ejecutándose en esta PC.");
            }
        }


    function onClear() {
        ClearTablet();
        document.getElementById('myTable').style.border = '1px solid black'; // Elimina el estilo de borde*/
    }

    function onDone() {
        if (NumberOfTabletPoints() == 0) {
            alert("Por favor firme antes de continuar");
        } else {
            SetTabletState(0, tmr);
            //RETURN TOPAZ-FORMAT SIGSTRING
            SetSigCompressionMode(1);
            document.FORM1.bioSigData.value = GetSigString();
            document.FORM1.sigStringData.value = GetSigString();

            //RETURN BMP BYTE ARRAY CONVERTED TO BASE64 STRING
            SetImageXSize(500);
            SetImageYSize(100);
            SetImagePenWidth(5);
            GetSigImageB64(sendSigImageData); // Llamada a la función modificada para enviar la cadena Base64
        }
    }

        function toasterOptions() {
            toastr.options = {
                closeButton: false,
                debug: false,
                newestOnTop: false,
                progressBar: true,
                positionClass: "toast-bottom-right",
                preventDuplicates: false,
                onclick: null,
                showDuration: "300",
                hideDuration: "1000",
                timeOut: "5000",
                extendedTimeOut: "1000",
                showEasing: "swing",
                hideEasing: "linear",
                showMethod: "fadeIn",
                hideMethod: "fadeOut",
            };
        }
function sendSigImageData(str) {
    // Mostrar animación de carga
    Swal.fire({
        title: 'Guardando Firma',
        html: 'Por favor espere mientras se completa este proceso',
        allowOutsideClick: false,
        timerProgressBar: true,
        showConfirmButton: false,
        willOpen: () => {
            Swal.showLoading();
        }
    });
    let numeroAsociado = document.getElementById("numeroAsociado").value;
    // Envía la cadena Base64 al controlador ASP.NET Framework MVC utilizando Fetch
    fetch('@Url.Action("GuardarFirma", "TblAsistenciasAsambaleas")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            sigImageData: str,
            numeroAsociado:numeroAsociado
        })
    })
    .then(response => {
        setTimeout(function () {
            Swal.close();
            toasterOptions();
            if (response.ok) {
                // Procesa la respuesta exitosa
                response.json()
                    .then(data => {
                        console.log(data); // Accede a los datos de la respuesta
                        if(data.Codigo != 1)
                        {
                            toastr.error('Ocurrió un problema al resolver la respuesta para la carga de la firma notifica al administrador');
                        }
                        document.getElementById("firma").value = data.Clave;
                        toastr.success('La firma se guardo exitosamente');
                        // Realiza las acciones necesarias con los datos recibidos
                    })
                    .catch(error => {
                        toastr.error('Ocurrió un problema al analizar la respuesta JSON del servicio de archivos');
                        console.log('Error al analizar la respuesta JSON:', error);
                    });
            } else {
                // Procesa la respuesta fallida
                console.log('Error en la respuesta del servidor:', response.status);
                toastr.error('Ocurrió un problema al resolver la respuesta del servidor',response.status);
            }
        }, 3000);
    })
    .catch(error => {
        // Procesa el error de la petición
        console.log('Error en la petición:', error);
        toastr.error('Ocurrio un problema al resolver la solicitud al servidor notifica al administrador');
    });
        }


        function completarAsistencia(url, data, beforeSendCallback) {
            //  - - - - -  show loading animation
            Swal.fire({
                title: 'Guardando Asistencia',
                html: 'Por favor espere mientras se completa este proceso...',
                allowOutsideClick: false,
                timerProgressBar: true,
                showConfirmButton: false,
                willOpen: () => {
                    Swal.showLoading();
                }
            });

            // Configurar opciones de solicitud
            let opciones = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            };

            // Si se proporciona una función beforeSendCallback, llámala antes de enviar la solicitud
            if (beforeSendCallback && typeof beforeSendCallback === 'function') {
                opciones = beforeSendCallback(opciones);
            }

            // Enviar solicitud y devolver la promesa resultante
            return fetch(url, opciones)
                .then(function (response) {
                    toasterOptions();
                    if (response.ok) {
                        return response.json(); // Devuelve la promesa de los datos de respuesta
                    } else {
                        Swal.close();
                        throw new Error('Error en la respuesta del servidor: ' + response.status);
                    }
                })
                .catch(function (error) {
                    Swal.close();
                    throw new Error('Error en la respuesta del servidor: ' + error.message);
                });
        }


document.getElementById("completar").addEventListener("click", function (e) {
    e.preventDefault();
    var btn = this;
    if (!btn.classList.contains("disabled")) {
        /* - - - - - - - inicia la llamada a la función - - - - - - - */
        var idTblAsistenciasAsambaleas = document.getElementById("idTblAsistenciasAsambaleas").value;
        var formTarjetaCredito = document.getElementById("formTarjetaCredito").value;
        var formAppMovil = document.getElementById("formAppMovil").value;
        var formCredito = document.getElementById("formCredito").value;
        var formZumaPagos = document.getElementById("formZumaPagos").value;
        var firma = document.getElementById("firma").value;

        var tblAsistenciasAsambaleas =
        {
            idTblAsistenciasAsambaleas: idTblAsistenciasAsambaleas,
            formTarjetaCredito: formTarjetaCredito,
            formAppMovil: formAppMovil,
            formCredito: formCredito,
            formZumaPagos: formZumaPagos,
            firma: firma
        }
        var url = '@Url.Action("CompletarAsistencia", "TblAsistenciasAsambaleas")';
        completarAsistencia(url,tblAsistenciasAsambaleas,function(opciones) {
            return opciones;
        })
        .then(function(respuesta) {
            setTimeout(function () {
                console.log(respuesta);
                Swal.close();
                if (respuesta.Codigo == 1) {
                    Swal.fire({
                        title: 'Correcto',
                        text: respuesta.Descripcion,
                        icon: 'success',
                        confirmButtonColor: '#153d77',
                        confirmButtonText: 'Aceptar',
                        allowOutsideClick: false // Evita hacer clic fuera de la alerta
                    }).then((result) => {
                        window.location.href = '@Url.Action("Home", "Asambleas")';

                    })
                }
                else
                {
                    toastr.error(respuesta.Descripcion);
                }
                
            }, 3000);
        })
        .catch(function(error) {
            toastr.error('Ocurrio un problema al resolver la respuesta del servidor');
        });
    } else {
        var errorMessage = "El botón está deshabilitado";
        console.log(errorMessage); // Imprime el mensaje de error en la consola
    }
});





    function SigImageCallback(str) {
        document.FORM1.sigImageData.value = str;
    }

    function endDemo() {
        ClearTablet();
        SetTabletState(0, tmr);
    }

    function close() {
        if (resetIsSupported) {
            Reset();
        } else {
            endDemo();
        }
    }

    //Perform the following actions on
    //	1. Browser Closure
    //	2. Tab Closure
    //	3. Tab Refresh
    window.onbeforeunload = function (evt) {
        close();
        clearInterval(tmr);
        evt.preventDefault(); //For Firefox, needed for browser closure
    };
    </script>
</body>
</html>
