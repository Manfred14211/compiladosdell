@model IEnumerable<iveCincoFrame.Models.TblAsistenciasAsambaleas>
@{
    ViewBag.Title = "Listado";
    Layout = "~/Views/Shared/_Layaut_Intranet.cshtml";
}
<script src="https://cdn.jsdelivr.net/gh/linways/table-to-excel@v1.0.4/dist/tableToExcel.js"></script>
<!-- Biblioteca xlsx.js -->
<script src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>

<!-- Biblioteca FileSaver.js -->
<script src="https://unpkg.com/file-saver"></script>
<button type="button" id="getArchivos" class="btn btn-primary">Primary</button>
<button id="btnExport" class="btn btn-success" onclick="exportReportToExcel(this)">EXPORTA EXCEL</button>
<br />
<table class="table" id="datatables-buttons">
    <thead class="small">
        <tr class="">
            <th class="small">
                Asociado
            </th>
            <th class="small">
                Numero de Asociado
            </th>
            <th class="small">
                Numero de DPI
            </th>
            <th class="small">
                Extendido
            </th>
            <th>
                Genero
            </th>
            <th>
                Edad
            </th>
            <th>
                Estado Civil
            </th>
            <th>
                Nacionalidad
            </th>
            <th>
                Fecha de Registro
            </th>
            <th>
                Firma
            </th>
        </tr>
    </thead>

    <tbody>
        @foreach (var item in Model)
        {
            <tr class="small">
                <td class="small">
                    @Html.DisplayFor(modelItem => item.nombres)
                </td>
                <td class="small">
                    @Html.DisplayFor(modelItem => item.numeroAsociado)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.numeroDpi)
                </td>
                <td class="small">
                    @Html.DisplayFor(modelItem => item.CatLugaresEmisionIdentificaciones.descripcion)
                </td>
                <td class="small">
                    @Html.DisplayFor(modelItem => item.genero)
                </td>
                <td class="small">
                    @Html.DisplayFor(modelItem => item.edad)
                </td>
                <td class="small">
                    @Html.DisplayFor(modelItem => item.estadoCivil)
                </td>
                <td class="small">
                    @Html.DisplayFor(modelItem => item.nacionalidad)
                </td>
                <td class="small">
                    @Html.DisplayFor(modelItem => item.fechaCreacion)
                </td>
                <td class="small">
                    <div class="container">
                        <img src="@item.firma" class="img-fluid" />
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>



<script>
    $(document).ready(function () {
        var datatablesButtons = $("#datatables-buttons").DataTable({
            responsive: true,
            ordering: false,
            pageLength: 5000
        });
        datatablesButtons.buttons().container().appendTo("#datatables-buttons_wrapper .col-md-6:eq(0)");
    });

    function exportReportToExcel() {
        // Crear un nuevo libro de Excel
        var workbook = XLSX.utils.book_new();

        // Obtener los datos de la tabla
        var table = document.getElementById('datatables-buttons');
        var sheetData = XLSX.utils.table_to_sheet(table);

        // Agregar las imágenes a las celdas correspondientes
        var images = table.getElementsByTagName('img');
        for (var i = 0; i < images.length; i++) {
            var img = images[i];
            var imgData = getBase64Image(img); // Obtener el código base64 de la imagen

            var imgRef = XLSX.utils.decode_range(sheetData['!ref']); // Obtener el rango de celdas
            var cellRef = XLSX.utils.encode_cell({ r: imgRef.s.r + i + 1, c: imgRef.e.c }); // Obtener la referencia de celda para la imagen

            sheetData[cellRef] = { t: 's', v: '', s: { fill: { patternType: 'none' } }, l: { Target: img.src, Tooltip: img.alt } }; // Agregar la imagen a la celda
            workbook.SheetNames.push('Sheet 1');
            workbook.Sheets['Sheet 1'] = sheetData;
        }

        // Guardar el libro de Excel en un archivo
        var excelFile = XLSX.write(workbook, { bookType: 'xlsx', type: 'binary' });
        saveAs(new Blob([s2ab(excelFile)], { type: 'application/octet-stream' }), 'Archivo.xlsx');
    }

    // Función auxiliar para convertir una cadena en un arreglo de bytes
    function s2ab(s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xff;
        return buf;
    }

    // Función auxiliar para obtener el código base64 de una imagen
    function getBase64Image(img) {
        var canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;

        var ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, img.width, img.height);

        var dataURL = canvas.toDataURL('image/png');
        return dataURL.replace(/^data:image\/(png|jpg);base64,/, '');
    }

    document.addEventListener("DOMContentLoaded", function () {
        $("#getArchivos").on("click", function (e) {
        e.preventDefault();
        var btn = $(this);
        if (!btn.hasClass("disabled"))
        {
          let url = '@Url.Action("GetListado", "TblAsistenciasAsambaleas")';
          getArchivo(url, function (opciones) {
            return opciones;
          })
            .then((response) => {
              console.log(response);
                /**mostrando la animacion */
                Swal.fire({
                    title: "Resolviendo el archivo ReporteIpass",
                    html: "Por favor espere ...",
                    allowOutsideClick: false,
                    timerProgressBar: true,
                    showConfirmButton: false,
                    willOpen: () => {
                        Swal.showLoading();
                    },
                });
              setTimeout(function () {
                  // Validar si la respuesta es un blob
                  swal.close();
                  if (response.type === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
                      const currentDate = new Date();
                      const formattedDate = currentDate.toISOString().split('T')[0]; // Obtiene la fecha actual en formato YYYY-MM-DD
                      const formattedTime = currentDate.toLocaleTimeString().replace(/:/g, ''); // Obtiene la hora actual en formato HHMMSS
                      const fileName = `ReporteIpass_${formattedDate}_${formattedTime}.xlsx`;
                      // Al recibir los datos de la respuesta en formato blob
                      const url = window.URL.createObjectURL(new Blob([response])); // Crea un objeto URL a partir de los datos blob
                      const link = document.createElement("a"); // Crea un elemento ancla (<a>) para descargar el archivo
                      link.href = url; // Establece la URL del enlace a la URL creada anteriormente
                      link.setAttribute("download", fileName); // Establece el atributo 'download' del enlace para descargar el archivo y le da un nombre al archivo
                      document.body.appendChild(link); // Agrega el enlace al cuerpo del documento HTML
                      link.click(); // Hace clic en el enlace para descargar el archivo
                      window.URL.revokeObjectURL(url); // Elimina el objeto URL creado anteriormente

                  } else {
                      toastr.error("Error al generar el archivo ")
                  }
              }, 3000);

            })
            .catch((error) => {
              // Si ocurre un error en alguna parte del proceso
              //console.error(error); // Registra el error en la consola del navegador
              toastr.error("La solicitud se envio correctamente pero ocurrio un problema al resolver el archivo."); // Muestra una alerta con el mensaje de error
            });

        } else {
          return false;
        }
        });

      function getArchivo(url, beforeSendCallback) {
        //  - - - - -  show loading animation
        Swal.fire({
            title: 'Generado Archivo',
            html: 'Por favor espere mientras se completa este proceso',
            allowOutsideClick: false,
            timerProgressBar: true,
            showConfirmButton: false,
            willOpen: () => {
                Swal.showLoading();
            }
        });
        // Configurar opciones de solicitud
        // aqui se declara el objeto opciones el cual se enviara dentro de la funcion enviarSolicitud
        let opciones = {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        };
        // Si se proporciona una función beforeSendCallback, llámala antes de enviar la solicitud
        if (beforeSendCallback && typeof beforeSendCallback === 'function') {
            opciones = beforeSendCallback(opciones);
        }
        // Enviar solicitud
        return fetch(url, opciones)
            .then(function (response) {
                if (!response.ok) {
                    console.log('Error al resolver los datos de la consulta');
                    toastr.success('Ocurrio un problema al resolver los datos de la consulta');
                }
                swal.close();
                return response.blob();
            })
            .catch(function (error) {
                console.long(error);
                toastr.error('Ocurrio un problema al resolver los datos de la consulta');
                swal.close();
            });
        }
    });
</script>
