@model iveCincoFrame.Models.Asasmblea.AsignacionesAsambelasDto
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>Intranet | Registro Asamblea</title>

    <!--jquery min-->
    <script src="https://code.jquery.com/jquery-3.6.1.min.js" integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=" crossorigin="anonymous"></script>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <!-- CSS -->
    <link href="~/Content/RecursosAsamblea/style.css" rel="stylesheet">
    <!--iconos fontawesome-->
    <script src="https://kit.fontawesome.com/ac17241314.js" crossorigin="anonymous"></script>
    <!-- FONT -->
    <link href="https://fonts.gstatic.com" rel="preconnect">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,200;1,300;1,400;1,500;1,600&display=swap" rel="stylesheet">
</head>
<body>
    <!-- CONTAINER -->
    <div class="container d-flex align-items-center min-vh-100">
        <div class="row g-0 justify-content-center">
            <!-- TITLE -->
            <div class="col-lg-4 offset-lg-1 mx-0 px-0">
                <div id="title-container">
                    <img class="covid-image" src="~/Content/img/principal minimum.png">
                    <h2>Asamblea 2023</h2>
                    <h3>Registro de Asistencias</h3>
                    <h5 class="text-white">Ingresa el DPI del asociado para validar su ingreso a este evento</h5>
                </div>
            </div>
            <!-- FORMS -->
            <div class="col-lg-7 mx-0 px-0">
                <div class="progress">
                    <div aria-valuemax="100" aria-valuemin="0" aria-valuenow="50" class="progress-bar progress-bar-striped progress-bar-animated bg-danger" role="progressbar" style="width: 0%"></div>
                </div>
                <div id="qbox-container">
                    @*<form class="needs-validation" id="form-wrapper" method="post" name="form-wrapper" novalidate="">*@
                        <div id="steps-container">
                            <div class="step">
                                <h5>Ingresa el numero de DPI del asociado</h5>
                                <div class="form-check ps-0 q-box">
                                    <div class="q-box__question">
                                        <div class="container">
                                            <div class="d-grid d-sm-flex gap-3">
                                                <div class="input-group input-group-lg mb-3">
                                                    <input class="form-control me-0" type="text" id="dpi" name="dpi" placeholder="Buscar Asociado" aria-label="Search" autofocus="" maxlength="13">
                                                    <button type="submit" class="btn btn-primary" id="buscar-asociado">Buscar <i class="align-middle me-2 fas fa-fw fa-search"></i></button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    @using (Html.BeginForm("EditDataAsociado", "TblAsistenciasAsambaleas",FormMethod.Post))
                                    {
                                        @Html.Partial("_MensajeParcial")
                                        <div class="q-box__question">
                                            @Html.HiddenFor(model => model.idTblAsistenciasAsambaleas)
                                            @Html.Label("Nombre completo", new { @class = "form-label" })
                                            <div class="input-group input-group-lg mb-3">
                                                <span class="input-group-text">
                                                    <i class="fa-solid fa-id-card-clip"></i>
                                                </span>
                                                @Html.EditorFor(model => model.nombres, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nombre del Asociado", @readOnly = "readonly" } })
                                                @*<input type="text" class="form-control" id="nombres" name="nombres" placeholder="Nombre del Asociado" readonly />*@
                                            </div>
                                        </div>
                                        <div class="q-box__question">
                                            @Html.Label("Numero de asociado", new { @class = "form-label" })
                                            <div class="input-group input-group-lg mb-3">
                                                <span class="input-group-text">
                                                    <i class="fa-solid fa-person-dots-from-line"></i>
                                                </span>
                                                @Html.EditorFor(model => model.numeroAsociado, new { htmlAttributes = new { @class = "form-control", @placeholder = "GT00000", @readOnly = "readonly" } })
                                                @*<input type="text" class="form-control" id="numeroAsociado" name="numeroAsociado" placeholder="COI00000" readonly />*@
                                            </div>
                                        </div>
                                        <div class="q-box__question">
                                            @Html.Label("Numero de Identificación (DPI)*", new { @class = "form-label" })
                                            <div class="input-group input-group-lg mb-3">
                                                <span class="input-group-text">
                                                    <i class="fa-solid fa-address-card"></i>
                                                </span>
                                                @Html.EditorFor(model => model.numeroDpi, new { htmlAttributes = new { @class = "form-control", @placeholder = "0000000000000", @readOnly = "readonly" } })
                                                @*<input type="text" class="form-control" id="numeroDpi" name="numeroDpi" placeholder="0000000000000" readonly />*@
                                            </div>
                                        </div>
                                        <div class="q-box__question">
                                            @Html.Label("Tipo de Asociado", new { @class = "form-label" })
                                            <div class="input-group input-group-lg mb-3" id="input-tipo-asociado">
                                                <span class="input-group-text">
                                                    <i class="fa-solid fa-user-tie"></i>
                                                </span>
                                                @Html.EditorFor(model => model.tipoAsociado, new { htmlAttributes = new { @class = "form-control", @placeholder = "-----", @readOnly = "readonly" } })
                                                @*<input type="text" class="form-control" id="tipoAsociado" name="tipoAsociado" placeholder="-----" readonly />*@
                                            </div>
                                        </div>
                                        <div class="q-box__question">
                                            @Html.Label("Estado en Tarjeta de Credito", new { @class = "form-label" })
                                            <div class="input-group input-group-lg mb-3">
                                                <span class="input-group-text">
                                                    <i class="fa-solid fa-credit-card"></i>
                                                </span>
                                                @Html.EditorFor(model => model.estadoTarjetaCredito, new { htmlAttributes = new { @class = "form-control", @placeholder = "-----", @readOnly = "readonly" } })
                                                @*<input type="text" class="form-control" id="estadoTarjetaCredito" name="estadoTarjetaCredito" placeholder="-----" readonly />*@
                                            </div>
                                        </div>
                                        <div class="q-box__question">
                                            @Html.Label("Estado en Creditos", new { @class = "form-label" })
                                            <div class="input-group input-group-lg mb-3">
                                                <span class="input-group-text">
                                                    <i class="fa-solid fa-hand-holding-dollar"></i>
                                                </span>
                                                @Html.EditorFor(model => model.estadoCreditos, new { htmlAttributes = new { @class = "form-control", @placeholder = "-----", @readOnly = "readonly" } })
                                                @*<input type="text" class="form-control" id="estadoCreditos" name="estadoCreditos" placeholder="-----" readonly />*@
                                            </div>
                                        </div>
                                        <div class="q-box__question">
                                            @Html.Label("Telefono de Contacto", new { @class = "form-label" })
                                            <div class="input-group input-group-lg mb-3">
                                                <span class="input-group-text">
                                                    <i class="fa-solid fa-phone"></i>
                                                </span>
                                                @Html.EditorFor(model => model.telefono, new { htmlAttributes = new { @class = "form-control", @placeholder = "00000000", @readOnly = "readonly" } })
                                                @*<input type="text" class="form-control" id="telefono" name="telefono" placeholder="-----" readonly />*@
                                            </div>
                                        </div>
                                        <div class="q-box__question">
                                            @Html.Label("Genero", new { @class = "form-label" })
                                            <div class="input-group input-group-lg mb-3">
                                                <span class="input-group-text">
                                                    <i class="fa-solid fa-street-view"></i>
                                                </span>
                                                @Html.EditorFor(model => model.genero, new { htmlAttributes = new { @class = "form-control", @placeholder = "----------", @readOnly = "readonly" } })
                                                @*<input type="text" class="form-control" id="genero" name="genero" placeholder="MASCULINO/FEMENINO" readonly value="TEST-GENERO" />*@
                                            </div>
                                        </div>
                                        <div class="text-center">
                                            <div class="btn-group" role="group" aria-label="Basic example">
                                                <button type="button" id="cancelar-asistencia" class="btn btn-outline-secondary">Cancelar</button>
                                                <button type="submit"  class="btn btn-primary btn-lg">Continuar </button>
                                            </div>
                                        </div>
                                        
                                    }

                                </div>
                            </div>
                        </div>

                    @*</form>*@
                </div>
            </div>
        </div>
    </div>

    <!-- Option 1: Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <script src="~/Content/RecursosAsamblea/script.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>
</html>



<script>
document.addEventListener("DOMContentLoaded", function () {
  document.getElementById("dpi").addEventListener("keyup", function (event) {
    if (event.which === 13) {
      document.getElementById("buscar-asociado").click();
    }
  });

  function validarAsociados(url, data, beforeSendCallback) {
    //  - - - - -  show loading animation
    Swal.fire({
      title: "Validando los datos ingresados",
      html: "Por favor espere ...",
      allowOutsideClick: false,
      timerProgressBar: true,
      showConfirmButton: false,
      willOpen: () => {
        Swal.showLoading();
      },
    });
    // - - - - - show loading animation fin codigo
    // Configurar opciones de solicitud
    // aqui se declara el objeto opciones el cual se enviara dentro de la funcion enviarSolicitud
    let opciones = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    };
    // Si se proporciona una función beforeSendCallback, llámala antes de enviar la solicitud
    if (beforeSendCallback && typeof beforeSendCallback === "function") {
      opciones = beforeSendCallback(opciones);
    }
    // Enviar solicitud
    return fetch(url, opciones)
      .then(function (response) {
        if (!response.ok) {
          toasterOptions();
          toastr.error("Ocurrio un problema al resolver los datos de la consulta intenta mas tarde");
          Swal.fire({
            icon: "error",
            title: "Error de consulta",
            text: "Ocurrio un problema al resolver los datos,intenta mas tarde",
            confirmButtonColor: "#153d77",
            customClass: {
              confirmButton: "btn-lg",
            },
            confirmButtonText: "Aceptar",
            confirmButtonHtml: true,
            allowOutsideClick: false,
            preConfirm: function () {
              // Redireccionar a la URL generada en Razor
              window.location.href = '@Url.Action("Index", "Asambleas")';
            },
          });
        }
        swal.close();
        return response.json();
      })
      .catch(function (error) {
        Swal.fire({
          icon: "error",
          title: "Error de consulta",
          text: "Ocurrio un problema al resolver los datos,intenta mas tarde",
          confirmButtonColor: "#153d77",
          customClass: {
            confirmButton: "btn-lg",
          },
          confirmButtonText: "Aceptar",
          confirmButtonHtml: true,
          allowOutsideClick: false,
          preConfirm: function () {
            // Redireccionar a la URL generada en Razor
            window.location.href = '@Url.Action("Index", "Asambleas")';
          },
        });
      });
  }
  function toasterOptions() {
    toastr.options = {
      closeButton: false,
      debug: false,
      newestOnTop: false,
      progressBar: true,
      positionClass: "toast-bottom-right",
      preventDuplicates: false,
      onclick: null,
      showDuration: "300",
      hideDuration: "1000",
      timeOut: "5000",
      extendedTimeOut: "1000",
      showEasing: "swing",
      hideEasing: "linear",
      showMethod: "fadeIn",
      hideMethod: "fadeOut",
    };
  }

  $("#buscar-asociado").on("click", function (e) {
    e.preventDefault();
    var btn = $(this);
    if (!btn.hasClass("disabled")) {
      /* - - - - - - - inicia la llamada a la funcion  validarAsociados- - - - - - - */
      var url = '@Url.Action("BuscarcarDpi", "Asambleas")';
      var asociado = document.getElementById("dpi").value;
      var data = {
        dpi: asociado,
      };
      validarAsociados(url, data, function (opciones) {
        return opciones;
      })
        .then(function (respuesta) {
          swal.close();
          /**mostrando la animacion */
          Swal.fire({
            title: "Resolviendo los datos para el asociado",
            html: "Por favor espere",
            allowOutsideClick: false,
            timerProgressBar: true,
            showConfirmButton: false,
            willOpen: () => {
              Swal.showLoading();
            },
          });
          setTimeout(function () {
            console.log(respuesta);
            if (respuesta.Codigo != 1) {
              //pinta descripcion de la respuesta
              swal.close(); //deteiene la animcacion
              toasterOptions();
              toastr.error(respuesta.Descripcion);
            } else {
              swal.close();
              if (respuesta.Listado.Estado == 201) {
                toasterOptions(); //configuracion de toaster
                toastr.success(respuesta.Listado.Descripcion);
              } else {
                toasterOptions(); //configuracion de toaster
                toastr.error(respuesta.Listado.Descripcion);
                alert(respuesta.Listado.Descripcion);
              }
              document.getElementById("dpi").value = ""; // Limpia el campo de entrada dpi
              /** Asignar los valores a los input*/
              document.getElementById("idTblAsistenciasAsambaleas").value =respuesta.Listado.idTblAsistenciasAsambaleas;
              document.getElementById("nombres").value =respuesta.Listado.Nombre;
              document.getElementById("numeroAsociado").value =respuesta.Listado.Asociado;
              document.getElementById("numeroDpi").value =respuesta.Listado.Dpi;
              document.getElementById("tipoAsociado").value =respuesta.Listado.CLASEASOCIADO;
              document.getElementById("estadoTarjetaCredito").value =respuesta.Listado.MORATC;
              document.getElementById("estadoCreditos").value =respuesta.Listado.MORA;
              document.getElementById("telefono").value =respuesta.Listado.Telefono;
              document.getElementById("genero").value = respuesta.Listado.Sexo;
            }
          }, 3000);
        })
        .catch(function (error) {
          Swal.fire({
            icon: "error",
            title: "Error de consulta",
            text: "Ocurrio un problema al resolver los datos,intenta mas tarde",
            confirmButtonColor: "#153d77",
            customClass: {
              confirmButton: "btn-lg",
            },
            confirmButtonText: "Aceptar",
            confirmButtonHtml: true,
            allowOutsideClick: false,
            preConfirm: function () {
              // Redireccionar a la URL generada en Razor
              window.location.href = '@Url.Action("Index", "Asambleas")';
            },
          });
        });
      /* - - - - - - - finaliza la llamada de la funcion - - - - - - - - - - - - - - -*/
    } else {
      return false;
    }
  });
  $("#cancelar-asistencia").on("click", function (e) {
     document.getElementById("idTblAsistenciasAsambaleas").value = "";
     document.getElementById("nombres").value = "";
     document.getElementById("numeroAsociado").value = "";
     document.getElementById("numeroDpi").value = "";
     document.getElementById("tipoAsociado").value = "";
     document.getElementById("estadoTarjetaCredito").value = "";
     document.getElementById("estadoCreditos").value = "";
     document.getElementById("telefono").value = "";
     document.getElementById("genero").value = "";
  });
});

</script>