
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Content/css/StyleUpload.css" rel="stylesheet">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
<div class="container-drop">
    <div ondrop="dropHandler(event)" ondragover="dragOverHandler(event)" class="row borders rounded-3 m-2 p-5 gap-2">
        <span class="material-symbols-outlined">upload_file</span>
        <label class="text-center p-0 m-0 fs-3 fw-bold" for="uploadFile">Arrastra y suelta el archivo aquí</label>

        <div class="col-sm-4 m-auto text-center">
            <label class="txt-color pb-2">Archivos Soportados | Excel (.xls, .xlsx).</label>
            <input type="file" class="form-control" name="uploadFile" id="uploadFile" accept=".xlsx, xls" />
            <label class="txt-color pt-2">Maximum Size: 10MB</label>
        </div>
    </div>
</div>
<div class=" row mx-1">
    <button class="btn btn-primary btn-lg" id="enviar-Solicitud" style="box-shadow: 0 0.15rem 1.75rem 0 rgb(33 40 50 / 15%); background: #153d77;">Publicar Archivo</button>
</div>
<div class="row my-1">
    <div class="btn-group" role="group" aria-label="Basic example">
        <button type="button" id="getCustomerInformation" class="btn btn-primary btn-lg">1-CUSTOMERINFORMATION</button>
        <button type="button" id="getAccountInformation" class="btn btn-success btn-lg">2-ACCOUNTINFORMACION</button>
        <button type="button" id="getCardInformation" class="btn btn-warning btn-lg">3-CARDINFORMATION</button>
        <button type="button" id="getCardAccountInformation" class="btn btn-secondary btn-lg">4-CARDACCOUNTLINKINFORMATION</button>
        <button type="button" id="setCustomerInformation" class="btn btn-secondary btn-lg">CREAR CUSTOMERS</button>
        <button type="button" id="setAccountInformation" class="btn btn-secondary btn-lg">CREAR CUENTAS</button>
        <button type="button" id="setCardInformation" class="btn btn-secondary btn-lg">CREAR CARDS</button>
    </div>
</div>

<script>
    function dropHandler(ev) {
        // Prevenir comportamiento predeterminado (cargar archivo en el navegador)
        ev.preventDefault();
        // Obtener archivo arrastrado
        var file = ev.dataTransfer.files[0];

        // Comprobar que es un archivo válido de Excel
        if (file.type !== "application/vnd.ms-excel" && file.type !== "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
            alert("Solo se permiten archivos de Excel en formato .xls o .xlsx");
            return;
        }

        // Comprobar que el archivo no excede el tamaño máximo
        if (file.size > 10 * 1024 * 1024) {
            alert("El archivo no debe exceder los 10MB");
            return;
        }

        // Crear una nueva instancia de FileList con el archivo
        var fileList = new DataTransfer();
        fileList.items.add(file);

        // Asignar el FileList al input de tipo file
        document.getElementById("uploadFile").files = fileList.files;

        // Remover la clase de CSS que activa la animación
        ev.currentTarget.classList.remove("dragging");
    }
    function dragOverHandler(ev) {
        // Prevenir comportamiento predeterminado (cargar archivo en el navegador)
        ev.preventDefault();
        // Agregar la clase de CSS que activa la animación
        ev.currentTarget.classList.add("dragging");
    }
    document.addEventListener('DOMContentLoaded', function () {
        function toasterOptions() {
            toastr.options = {
                "closeButton": false,
                "debug": false,
                "newestOnTop": false,
                "progressBar": true,
                "positionClass": "toast-bottom-right",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            };
        }
    $("#enviar-Solicitud").on('click', function (e) {
        /*funcion para enviar la solcitud*/
        function enviarArchivo(url, data, beforeSendCallback) {
            // show loading animation
            let timerInterval
            Swal.fire({
                title: 'Publicando Archivo...',
                html: 'Mensaje: Por favor espere mientras se realiza este proceso progreso undefined% ',
                allowOutsideClick: false,
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading()
                },
                willClose: () => {
                    clearInterval(timerInterval)
                }
            }).then((result) => {
                /* Read more about handling dismissals below */
                if (result.dismiss === Swal.DismissReason.timer) {
                    console.log('I was closed by the timer')
                }
            })
            // Configurar opciones de solicitud
            // aqui se declara el objeto opciones el cual se enviara dentro de la funcion enviarSolicitud
            let opciones = {
                method: 'POST',
                body: data
            };
            // Si se proporciona una función beforeSendCallback, llámala antes de enviar la solicitud
            if (beforeSendCallback && typeof beforeSendCallback === 'function') {
                opciones = beforeSendCallback(opciones);
            }
            // Enviar solicitud
            return fetch(url, opciones)
                .then(function (response) {
                    if (!response.ok) {
                        throw new Error('Error al enviar la solicitud');

                    }
                    swal.close();

                    return response.json();
                })
                .catch(function (error) {

                    toastr.error('ocurrio un error inesperado al enviar la solicitud fetch');
                    swal.close();
                });
        }
        /*finaliza la funcion*/
        /*se declaran las varibles a enviar en la solicitud*/
        var file = document.getElementById("uploadFile").files[0];
        // Verificar que se haya cargado un archivo
        if (!file) {
            alert("Debe seleccionar un archivo para enviar.");
            return;
        }
        // Crear instancia de FormData
        var formData = new FormData();
        // Agregar el archivo al FormData
        formData.append("archivo", file);

        /*instrucciones que evitan que se envie varias veces la peticion bloquea el boton*/
        e.preventDefault();
        var btn = $(this);
        if (!btn.hasClass('disabled')) {
            //se llama a la funion enviarSolicitud
            let url = '@Url.Action("GuardarArchivo", "TblCuentasAsociados")';
            enviarArchivo(url, formData, function (opciones) {

                return opciones;
            })
            .then(function (respuesta) {

                    console.log(respuesta);
                    if (respuesta.Codigo === 1) {
                        swal.close();
                        const fileInput = document.getElementById('uploadFile');
                        fileInput.value = null;
                        toasterOptions();
                        toastr.success(respuesta.Descripcion);
                        console.log(respuesta);
                    } else {
                        const fileInput = document.getElementById('uploadFile');
                        fileInput.value = null;
                        toasterOptions();
                        toastr.error(respuesta.Descripcion);
                        swal.close();
                    }
            })
            .catch(function (error) {
                const fileInput = document.getElementById('uploadFile');
                fileInput.value = null;
                console.log(error);
                toasterOptions();
                toastr.error(error);
            });
        }
        else {
            return false;
        }
    });
    $("#setCustomerInformation").on("click", function (e) {
      /*funcion para enviar la solcitud*/
      function getArchivo(url, beforeSendCallback) {
        // show loading animation
        let timerInterval
        Swal.fire({
            title: 'Generando archivo',
            html: 'Mensaje: Porfavor espere progreso undefined% CUSTOMERINFORMATION%$',
            allowOutsideClick: false,
            timerProgressBar: true,
            didOpen: () => {
                Swal.showLoading()
            },
            willClose: () => {
                clearInterval(timerInterval)
            }
        }).then((result) => {
            /* Read more about handling dismissals below */
            if (result.dismiss === Swal.DismissReason.timer) {
                console.log('I was closed by the timer')
            }
        })
        // Configurar opciones de solicitud
        // aqui se declara el objeto opciones el cual se enviara dentro de la funcion enviarSolicitud
        let opciones = {
          method: "GET",
        };
        // Si se proporciona una función beforeSendCallback, llámala antes de enviar la solicitud
        if (beforeSendCallback && typeof beforeSendCallback === "function") {
          opciones = beforeSendCallback(opciones);
        }
        // Enviar solicitud
        return fetch(url, opciones)
          .then((response) => {
            swal.close(); //<--- CERRAMOS LA ALERTA
            if (!response.ok) {
              alert("Error al enviar la solicitud");
              throw new Error("Error al enviarla solicitud");
            }
            /**VALIDAMOS EL TIPO DE RESPUESTA SI ES ARCHIVO O JSON
             * ESTO PORQUE EL ACTION DEVUELVE UN JSON INIDICANDO EL ERRO
             * SI EN SU DEFECTO TODO ES CORRECTO SE DEVUELVE EL BLOB
             */
            if (response.headers.get("content-type") === "application/json") {
                console.log("es un json")
              return response.json();
            } else {
                console.log("es un blob")
              return response.blob();
            }
          })
          .catch((error) => {
            swal.close(); //<--- CERRAMOS LA ALERTA
            toastr.error(
              "ocurrio un error inesperado al enviar la solicitud fetch"
            );
          });
      }
      /*finaliza la funcion*/

      /*instrucciones que evitan que se envie varias veces la peticion bloquea el boton*/
      e.preventDefault();
      var btn = $(this);
      if (!btn.hasClass("disabled")) {
        //se llama a la funion enviarSolicitud
        let url = '@Url.Action("SetCustomerInformation", "TblCuentasAsociados")';
        getArchivo(url, function (opciones) {
          return opciones;
        })
          .then((response) => {
            console.log(response);
            // Validar si la respuesta es un blob
            if (response.type === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
              // Al recibir los datos de la respuesta en formato blob
              const url = window.URL.createObjectURL(new Blob([response])); // Crea un objeto URL a partir de los datos blob
              const link = document.createElement("a"); // Crea un elemento ancla (<a>) para descargar el archivo
              link.href = url; // Establece la URL del enlace a la URL creada anteriormente
              link.setAttribute("download", "1-CUSTOMERINFORMATION.xlsx"); // Establece el atributo 'download' del enlace para descargar el archivo y le da un nombre al archivo
              document.body.appendChild(link); // Agrega el enlace al cuerpo del documento HTML
              link.click(); // Hace clic en el enlace para descargar el archivo
              window.URL.revokeObjectURL(url); // Elimina el objeto URL creado anteriormente
            } else {
              // Si la respuesta no es un blob
                return response.json() // Devuelve una promesa que resuelve en un objeto JSON
                .then((json) => {
                  // Maneja los datos JSON
                  alert("Error al generar el archivo "+ json.description);
                })
                .catch((error) => {
                  // Si ocurre un error al procesar los datos JSON
                  console.error(error); // Registra el error en la consola del navegador
                  alert("Error al procesar la respuesta."); // Muestra una alerta con el mensaje de error
                });
            }
          })
          .catch((error) => {
            // Si ocurre un error en alguna parte del proceso
            //console.error(error); // Registra el error en la consola del navegador
            alert("La peticion se envio correctamente pero ocurrio un error al descargar el archivo."); // Muestra una alerta con el mensaje de error
          });
      } else {
        return false;
      }
    });
    $("#setCardInformation").on("click", function (e) {
    /*funcion para enviar la solcitud*/
    function getArchivo(url, beforeSendCallback) {
      // show loading animation
      let timerInterval
      Swal.fire({
          title: 'Generando archivo',
          html: 'Mensaje: Porfavor espere progreso undefined% CUSTOMERINFORMATION%$',
          allowOutsideClick: false,
          timerProgressBar: true,
          didOpen: () => {
              Swal.showLoading()
          },
          willClose: () => {
              clearInterval(timerInterval)
          }
      }).then((result) => {
          /* Read more about handling dismissals below */
          if (result.dismiss === Swal.DismissReason.timer) {
              console.log('I was closed by the timer')
          }
      })
      // Configurar opciones de solicitud
      // aqui se declara el objeto opciones el cual se enviara dentro de la funcion enviarSolicitud
      let opciones = {
        method: "GET",
      };
      // Si se proporciona una función beforeSendCallback, llámala antes de enviar la solicitud
      if (beforeSendCallback && typeof beforeSendCallback === "function") {
        opciones = beforeSendCallback(opciones);
      }
      // Enviar solicitud
      return fetch(url, opciones)
        .then((response) => {
          swal.close(); //<--- CERRAMOS LA ALERTA
          if (!response.ok) {
            alert("Error al enviar la solicitud");
            console.log(response);
            throw new Error("Error al enviarla solicitud");
          }
          /**VALIDAMOS EL TIPO DE RESPUESTA SI ES ARCHIVO O JSON
           * ESTO PORQUE EL ACTION DEVUELVE UN JSON INIDICANDO EL ERRO
           * SI EN SU DEFECTO TODO ES CORRECTO SE DEVUELVE EL BLOB
           */
            return response.json();

        })
        .catch((error) => {
          swal.close(); //<--- CERRAMOS LA ALERTA
          toastr.error(
            "ocurrio un error inesperado al enviar la solicitud fetch"
          );
        });
    }
    /*finaliza la funcion*/

    /*instrucciones que evitan que se envie varias veces la peticion bloquea el boton*/
    e.preventDefault();
    var btn = $(this);
    if (!btn.hasClass("disabled")) {
      //se llama a la funion enviarSolicitud
      let url = '@Url.Action("SetCardInformation", "TblCuentasAsociados")';
      getArchivo(url, function (opciones) {
        return opciones;
      })
        .then((response) => {
          console.log(response);
        })
        .catch((error) => {
          // Si ocurre un error en alguna parte del proceso
          //console.error(error); // Registra el error en la consola del navegador
          alert("La peticion se envio correctamente pero ocurrio un error al descargar el archivo."); // Muestra una alerta con el mensaje de error
        });
    } else {
      return false;
    }
  });

    $("#getAccountInformation").on("click", function (e) {
      /*funcion para enviar la solcitud*/
      function getArchivo(url, beforeSendCallback) {
        // show loading animation
        let timerInterval
        Swal.fire({
            title: 'Generando archivo',
            html: 'Mensaje: Porfavor espere progreso undefined% ACCOUNTINFORMACION%$',
            allowOutsideClick: false,
            timerProgressBar: true,
            didOpen: () => {
                Swal.showLoading()
            },
            willClose: () => {
                clearInterval(timerInterval)
            }
        }).then((result) => {
            /* Read more about handling dismissals below */
            if (result.dismiss === Swal.DismissReason.timer) {
                console.log('I was closed by the timer')
            }
        })
        // Configurar opciones de solicitud
        // aqui se declara el objeto opciones el cual se enviara dentro de la funcion enviarSolicitud
        let opciones = {
          method: "GET",
        };
        // Si se proporciona una función beforeSendCallback, llámala antes de enviar la solicitud
        if (beforeSendCallback && typeof beforeSendCallback === "function") {
          opciones = beforeSendCallback(opciones);
        }
        // Enviar solicitud
        return fetch(url, opciones)
          .then((response) => {
            swal.close(); //<--- CERRAMOS LA ALERTA
            if (!response.ok) {
              alert("Error al enviar la solicitud");
              throw new Error("Error al enviarla solicitud");
            }
            /**VALIDAMOS EL TIPO DE RESPUESTA SI ES ARCHIVO O JSON
             * ESTO PORQUE EL ACTION DEVUELVE UN JSON INIDICANDO EL ERRO
             * SI EN SU DEFECTO TODO ES CORRECTO SE DEVUELVE EL BLOB
             */
            if (response.headers.get("content-type") === "application/json") {
                console.log("es un json")
              return response.json();
            } else {
                console.log("es un blob")
              return response.blob();
            }
          })
          .catch((error) => {
            swal.close(); //<--- CERRAMOS LA ALERTA
            toastr.error(
              "ocurrio un error inesperado al enviar la solicitud fetch"
            );
          });
      }
      /*finaliza la funcion*/

      /*instrucciones que evitan que se envie varias veces la peticion bloquea el boton*/
      e.preventDefault();
      var btn = $(this);
      if (!btn.hasClass("disabled")) {
        //se llama a la funion enviarSolicitud
        let url = '@Url.Action("SetAccountInformation", "TblCuentasAsociados")';
        getArchivo(url, function (opciones) {
          return opciones;
        })
          .then((response) => {
            console.log(response);
            // Validar si la respuesta es un blob
            if (response.type === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
              // Al recibir los datos de la respuesta en formato blob
              const url = window.URL.createObjectURL(new Blob([response])); // Crea un objeto URL a partir de los datos blob
              const link = document.createElement("a"); // Crea un elemento ancla (<a>) para descargar el archivo
              link.href = url; // Establece la URL del enlace a la URL creada anteriormente
              link.setAttribute("download", "2-ACCOUNTINFORMACION.xlsx"); // Establece el atributo 'download' del enlace para descargar el archivo y le da un nombre al archivo
              document.body.appendChild(link); // Agrega el enlace al cuerpo del documento HTML
              link.click(); // Hace clic en el enlace para descargar el archivo
              window.URL.revokeObjectURL(url); // Elimina el objeto URL creado anteriormente
            } else {
              // Si la respuesta no es un blob
                return response.json() // Devuelve una promesa que resuelve en un objeto JSON
                .then((json) => {
                  // Maneja los datos JSON
                  alert("Error al generar el archivo "+ json.description);
                })
                .catch((error) => {
                  // Si ocurre un error al procesar los datos JSON
                  console.error(error); // Registra el error en la consola del navegador
                  alert("Error al procesar la respuesta."); // Muestra una alerta con el mensaje de error
                });
            }
          })
          .catch((error) => {
            // Si ocurre un error en alguna parte del proceso
            //console.error(error); // Registra el error en la consola del navegador
            alert("La peticion se envio correctamente pero ocurrio un error al descargar el archivo."); // Muestra una alerta con el mensaje de error
          });
      } else {
        return false;
      }
    });
    $("#getCardAccountInformation").on("click", function (e) {
      /*funcion para enviar la solcitud*/
      function getArchivo(url, beforeSendCallback) {
        // show loading animation
        let timerInterval
        Swal.fire({
            title: 'Generando archivo',
            html: 'Mensaje: Porfavor espere progreso undefined% CARDINFORMATION',
            allowOutsideClick: false,
            timerProgressBar: true,
            didOpen: () => {
                Swal.showLoading()
            },
            willClose: () => {
                clearInterval(timerInterval)
            }
        }).then((result) => {
            /* Read more about handling dismissals below */
            if (result.dismiss === Swal.DismissReason.timer) {
                console.log('I was closed by the timer')
            }
        })
        // Configurar opciones de solicitud
        // aqui se declara el objeto opciones el cual se enviara dentro de la funcion enviarSolicitud
        let opciones = {
          method: "GET",
        };
        // Si se proporciona una función beforeSendCallback, llámala antes de enviar la solicitud
        if (beforeSendCallback && typeof beforeSendCallback === "function") {
          opciones = beforeSendCallback(opciones);
        }
        // Enviar solicitud
        return fetch(url, opciones)
          .then((response) => {
            swal.close(); //<--- CERRAMOS LA ALERTA
            if (!response.ok) {
              alert("Error al enviar la solicitud");
              throw new Error("Error al enviarla solicitud");
            }
            /**VALIDAMOS EL TIPO DE RESPUESTA SI ES ARCHIVO O JSON
             * ESTO PORQUE EL ACTION DEVUELVE UN JSON INIDICANDO EL ERRO
             * SI EN SU DEFECTO TODO ES CORRECTO SE DEVUELVE EL BLOB
             */
            if (response.headers.get("content-type") === "application/json") {
                console.log("es un json")
              return response.json();
            } else {
                console.log("es un blob")
              return response.blob();
            }
          })
          .catch((error) => {
            swal.close(); //<--- CERRAMOS LA ALERTA
            toastr.error(
              "ocurrio un error inesperado al enviar la solicitud fetch"
            );
          });
      }
      /*finaliza la funcion*/

      /*instrucciones que evitan que se envie varias veces la peticion bloquea el boton*/
      e.preventDefault();
      var btn = $(this);
      if (!btn.hasClass("disabled")) {
        //se llama a la funion enviarSolicitud
        let url = '@Url.Action("GetCardAccountInformation", "TblCuentasAsociados")';
        getArchivo(url, function (opciones) {
          return opciones;
        })
          .then((response) => {
            console.log(response);
            // Validar si la respuesta es un blob
            if (response.type === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
              // Al recibir los datos de la respuesta en formato blob
              const url = window.URL.createObjectURL(new Blob([response])); // Crea un objeto URL a partir de los datos blob
              const link = document.createElement("a"); // Crea un elemento ancla (<a>) para descargar el archivo
              link.href = url; // Establece la URL del enlace a la URL creada anteriormente
              link.setAttribute("download", "4-CARDACCOUNTLINKINFORMATION.xlsx"); // Establece el atributo 'download' del enlace para descargar el archivo y le da un nombre al archivo
              document.body.appendChild(link); // Agrega el enlace al cuerpo del documento HTML
              link.click(); // Hace clic en el enlace para descargar el archivo
              window.URL.revokeObjectURL(url); // Elimina el objeto URL creado anteriormente
            } else {
              // Si la respuesta no es un blob
                console.log(response);
                return response.json() // Devuelve una promesa que resuelve en un objeto JSON
                .then((json) => {
                  // Maneja los datos JSON
                  alert("Error al generar el archivo "+ json.description);
                })
                .catch((error) => {
                  // Si ocurre un error al procesar los datos JSON
                  console.log(error); // Registra el error en la consola del navegador
                  alert("Error al procesar la respuesta."); // Muestra una alerta con el mensaje de error
                });
            }
          })
          .catch((error) => {
            // Si ocurre un error en alguna parte del proceso
              //console.error(error); // Registra el error en la consola del navegador
            console.log(error);
            alert("La peticion se envio correctamente pero ocurrio un error al descargar el archivo."); // Muestra una alerta con el mensaje de error
          });
      } else {
        return false;
      }
    });

    $("#getCardInformation").on("click", function (e) {
      /*funcion para enviar la solcitud*/
      function getArchivo(url, beforeSendCallback) {
        // show loading animation
        let timerInterval
        Swal.fire({
            title: 'Generando archivo',
            html: 'Mensaje: Porfavor espere progreso undefined% CARDINFORMATION',
            allowOutsideClick: false,
            timerProgressBar: true,
            didOpen: () => {
                Swal.showLoading()
            },
            willClose: () => {
                clearInterval(timerInterval)
            }
        }).then((result) => {
            /* Read more about handling dismissals below */
            if (result.dismiss === Swal.DismissReason.timer) {
                console.log('I was closed by the timer')
            }
        })
        // Configurar opciones de solicitud
        // aqui se declara el objeto opciones el cual se enviara dentro de la funcion enviarSolicitud
        let opciones = {
          method: "GET",
        };
        // Si se proporciona una función beforeSendCallback, llámala antes de enviar la solicitud
        if (beforeSendCallback && typeof beforeSendCallback === "function") {
          opciones = beforeSendCallback(opciones);
        }
        // Enviar solicitud
        return fetch(url, opciones)
          .then((response) => {
            swal.close(); //<--- CERRAMOS LA ALERTA
            if (!response.ok) {
              alert("Error al enviar la solicitud");
              throw new Error("Error al enviarla solicitud");
            }
            /**VALIDAMOS EL TIPO DE RESPUESTA SI ES ARCHIVO O JSON
             * ESTO PORQUE EL ACTION DEVUELVE UN JSON INIDICANDO EL ERRO
             * SI EN SU DEFECTO TODO ES CORRECTO SE DEVUELVE EL BLOB
             */
            if (response.headers.get("content-type") === "application/json") {
                console.log("es un json")
              return response.json();
            } else {
                console.log("es un blob")
              return response.blob();
            }
          })
          .catch((error) => {
            swal.close(); //<--- CERRAMOS LA ALERTA
            toastr.error(
              "ocurrio un error inesperado al enviar la solicitud fetch"
            );
          });
      }
      /*finaliza la funcion*/

      /*instrucciones que evitan que se envie varias veces la peticion bloquea el boton*/
      e.preventDefault();
      var btn = $(this);
      if (!btn.hasClass("disabled")) {
        //se llama a la funion enviarSolicitud
        let url = '@Url.Action("GetCardInformation", "TblCuentasAsociados")';
        getArchivo(url, function (opciones) {
          return opciones;
        })
          .then((response) => {
            console.log(response);
            // Validar si la respuesta es un blob
            if (response.type === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
              // Al recibir los datos de la respuesta en formato blob
              const url = window.URL.createObjectURL(new Blob([response])); // Crea un objeto URL a partir de los datos blob
              const link = document.createElement("a"); // Crea un elemento ancla (<a>) para descargar el archivo
              link.href = url; // Establece la URL del enlace a la URL creada anteriormente
              link.setAttribute("download", "3-CARDINFORMATION.xlsx"); // Establece el atributo 'download' del enlace para descargar el archivo y le da un nombre al archivo
              document.body.appendChild(link); // Agrega el enlace al cuerpo del documento HTML
              link.click(); // Hace clic en el enlace para descargar el archivo
              window.URL.revokeObjectURL(url); // Elimina el objeto URL creado anteriormente
            } else {
              // Si la respuesta no es un blob
                return response.json() // Devuelve una promesa que resuelve en un objeto JSON
                .then((json) => {
                  // Maneja los datos JSON
                  alert("Error al generar el archivo "+ json.description);
                })
                .catch((error) => {
                  // Si ocurre un error al procesar los datos JSON
                  console.error(error); // Registra el error en la consola del navegador
                  alert("Error al procesar la respuesta."); // Muestra una alerta con el mensaje de error
                });
            }
          })
          .catch((error) => {
            // Si ocurre un error en alguna parte del proceso
            //console.error(error); // Registra el error en la consola del navegador
            alert("La peticion se envio correctamente pero ocurrio un error al descargar el archivo."); // Muestra una alerta con el mensaje de error
          });
      } else {
        return false;
      }
    });
    $("#getCustomerInformation").on("click", function (e) {
      /*funcion para enviar la solcitud*/
      function getArchivo(url, beforeSendCallback) {
        // show loading animation
        let timerInterval
        Swal.fire({
            title: 'Generando archivo',
            html: 'Mensaje: Porfavor espere progreso undefined% CUSTOMERINFORMATION%$',
            allowOutsideClick: false,
            timerProgressBar: true,
            didOpen: () => {
                Swal.showLoading()
            },
            willClose: () => {
                clearInterval(timerInterval)
            }
        }).then((result) => {
            /* Read more about handling dismissals below */
            if (result.dismiss === Swal.DismissReason.timer) {
                console.log('I was closed by the timer')
            }
        })
        // Configurar opciones de solicitud
        // aqui se declara el objeto opciones el cual se enviara dentro de la funcion enviarSolicitud
        let opciones = {
          method: "GET",
        };
        // Si se proporciona una función beforeSendCallback, llámala antes de enviar la solicitud
        if (beforeSendCallback && typeof beforeSendCallback === "function") {
          opciones = beforeSendCallback(opciones);
        }
        // Enviar solicitud
        return fetch(url, opciones)
          .then((response) => {
            swal.close(); //<--- CERRAMOS LA ALERTA
            if (!response.ok) {
              alert("Error al enviar la solicitud");
              throw new Error("Error al enviarla solicitud");
            }
            /**VALIDAMOS EL TIPO DE RESPUESTA SI ES ARCHIVO O JSON
             * ESTO PORQUE EL ACTION DEVUELVE UN JSON INIDICANDO EL ERRO
             * SI EN SU DEFECTO TODO ES CORRECTO SE DEVUELVE EL BLOB
             */
            if (response.headers.get("content-type") === "application/json") {
                console.log("es un json")
              return response.json();
            } else {
                console.log("es un blob")
              return response.blob();
            }
          })
          .catch((error) => {
            swal.close(); //<--- CERRAMOS LA ALERTA
            toastr.error(
              "ocurrio un error inesperado al enviar la solicitud fetch"
            );
          });
      }
      /*finaliza la funcion*/

      /*instrucciones que evitan que se envie varias veces la peticion bloquea el boton*/
      e.preventDefault();
      var btn = $(this);
      if (!btn.hasClass("disabled")) {
        //se llama a la funion enviarSolicitud
        let url = '@Url.Action("GetCustomerInformation", "TblCuentasAsociados")';
        getArchivo(url, function (opciones) {
          return opciones;
        })
          .then((response) => {
            console.log(response);
            // Validar si la respuesta es un blob
            if (response.type === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
              // Al recibir los datos de la respuesta en formato blob
              const url = window.URL.createObjectURL(new Blob([response])); // Crea un objeto URL a partir de los datos blob
              const link = document.createElement("a"); // Crea un elemento ancla (<a>) para descargar el archivo
              link.href = url; // Establece la URL del enlace a la URL creada anteriormente
              link.setAttribute("download", "1-CUSTOMERINFORMATION.xlsx"); // Establece el atributo 'download' del enlace para descargar el archivo y le da un nombre al archivo
              document.body.appendChild(link); // Agrega el enlace al cuerpo del documento HTML
              link.click(); // Hace clic en el enlace para descargar el archivo
              window.URL.revokeObjectURL(url); // Elimina el objeto URL creado anteriormente
            } else {
              // Si la respuesta no es un blob
                return response.json() // Devuelve una promesa que resuelve en un objeto JSON
                .then((json) => {
                  // Maneja los datos JSON
                  alert("Error al generar el archivo "+ json.description);
                })
                .catch((error) => {
                  // Si ocurre un error al procesar los datos JSON
                  console.error(error); // Registra el error en la consola del navegador
                  alert("Error al procesar la respuesta."); // Muestra una alerta con el mensaje de error
                });
            }
          })
          .catch((error) => {
            // Si ocurre un error en alguna parte del proceso
            //console.error(error); // Registra el error en la consola del navegador
            alert("La peticion se envio correctamente pero ocurrio un error al descargar el archivo."); // Muestra una alerta con el mensaje de error
          });
      } else {
        return false;
      }
    });

    });
</script>

