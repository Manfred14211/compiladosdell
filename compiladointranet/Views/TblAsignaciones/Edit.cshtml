@model iveCincoFrame.Models.Tableros.Asignaciones.AsignacionDto

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    #container-meses {
        background-color: rgba(var(--bs-primary-rgb), 0.1);
        padding: 0.825rem 0.825rem;
        border-radius: 0.825rem;
    }
</style>
<div class="row">
    <div class="col-12">
        <div>
            <div class="card">
                <div class="card-body">
                    <div class="my-3">

                        <div id="transac-directorios" class="col-12">
                            <div class="card-actions text-white bg-success-dark mt-0 mb-1" style=""><i class="align-middle me-2 fas fa-fw fa-plus-circle"></i> Configuracion de las sucursales</div>
                            <div class="mb-0"><button type="button" class="btn btn-primary btn-lg" onclick="location.href='@Url.Action("Index", "TblAsignaciones")'" style="box-shadow: 0 0.15rem 1.75rem 0 rgb(33 40 50 / 15%); background: #153d77;"><i class="align-middle me-2 fas fa-fw fa-arrow-alt-circle-left"></i></button></div>
                            @using (Html.BeginForm())
                            {

                                @Html.Partial("_MensajeParcial")
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                @Html.HiddenFor(model => model.idTblAsignaciones)
                                <div class="row px-1 px-sm-1 px-md-12 px-lg-12 text-center">
                                    <h4 class="text-primary" style="color: #153d77 !important;">Configuracion de sucursales <span><i class="fa-solid fa-store"></i></span></h4>
                                </div>
                                <hr />
                                <div class="row px-1 px-sm-1 px-md-3 px-lg-4">
                                    <div class="col-12 col-sm-12  col-md-12 col-lg-12 d-none" id="container-mMensual">
                                        @Html.Label("Tipo de medicion", new { @class = "form-label" })
                                        <div class="input-group input-group-lg mb-3">
                                            <span class="input-group-text">
                                                <i class="fa-solid fa-money-bill"></i>
                                            </span>

                                            @Html.EditorFor(model => model.idCatTiposMedicion, new { htmlAttributes = new { @class = "form-control", @placeholder = "0.00" } })
                                        </div>
                                    </div>
                                    <div class="col-12 col-sm-12 col-md-4 col-lg-4">
                                        @Html.Label("Año", new { @class = "form-label" })
                                        <div class="input-group input-group-lg mb-3">
                                            <span class="input-group-text">
                                                <i class="fa-solid fa-calendar"></i>
                                            </span>
                                            @Html.DropDownList("idCatAnios", null, htmlAttributes: new { @class = "form-select", @disabled = "disabled" })
                                            @Html.ValidationMessageFor(model => model.idCatAnios, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-12 col-sm-12  col-md-4 col-lg-4">
                                        @Html.Label("Mes", new { @class = "form-label" })
                                        <div class="input-group input-group-lg mb-3">
                                            <span class="input-group-text">
                                                <i class="fa-solid fa-calendar-days"></i>
                                            </span>

                                            @Html.DropDownList("idCatMeses", null, htmlAttributes: new { @class = "form-select" })
                                            @Html.ValidationMessageFor(model => model.idCatMeses, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-12 col-sm-12  col-md-4 col-lg-4">
                                        @Html.Label("Sucursal", new { @class = "form-label" })
                                        <div class="input-group input-group-lg mb-3">
                                            <span class="input-group-text">
                                                <i class="fa-solid fa-shop"></i>
                                            </span>

                                            @Html.DropDownList("idCatUbicaciones", null, htmlAttributes: new { @class = "form-control" })

                                        </div>
                                    </div>
                                </div>
                                <div class="row px-1 px-sm-1 px-md-3 px-lg-4">
                                    <div class="col-12 col-sm-12  col-md-4 col-lg-4">
                                        @Html.Label("Clasificación", new { @class = "form-label" })
                                        <div class="input-group input-group-lg mb-3">
                                            <span class="input-group-text">
                                                <i class="fa-solid fa-boxes-stacked"></i>
                                            </span>

                                            @Html.DropDownList("idCatTipificacionProductos", null, htmlAttributes: new { @class = "form-select", @disabled = "disabled" })
                                        </div>
                                    </div>
                                    <div class="col-12 col-sm-12  col-md-4 col-lg-4">
                                        @Html.Label("Producto", new { @class = "form-label" })
                                        <div class="input-group input-group-lg mb-3">
                                            <span class="input-group-text">
                                                <i class="fa-solid fa-box"></i>
                                            </span>

                                            @Html.DropDownList("idTblProductosCooitza", null, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
                                            @Html.ValidationMessageFor(model => model.idTblProductosCooitza, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-12 col-sm-12  col-md-4 col-lg-4">
                                        @Html.Label("Tipo de distribución", new { @class = "form-label" })
                                        <div class="input-group input-group-lg mb-3">
                                            <span class="input-group-text">
                                                <i class="align-middle me-2 fas fa-fw fa-user"></i>
                                            </span>
                                            @Html.DropDownListFor(m => m.idCatTiposDistribuciones, ViewBag.idCatTiposDistribuciones as SelectList, "Seleccione una opcion", new { @class = "form-select" })

                                            @Html.ValidationMessageFor(model => model.idCatTiposDistribuciones, "", new { @class = "text-danger" })
                                        </div>

                                    </div>
                                </div>

                                <div class="row px-1 px-sm-1 px-md-3 px-lg-4">
                                    @*@if (Model.idCatTiposMedicion == 1)
                {
                    <div class="col-12 col-sm-12  col-md-4 col-lg-4">
                        @Html.Label("Cantidad de cierre del año", new { @class = "form-label" })
                        <div class="input-group input-group-lg mb-3">
                            <span class="input-group-text">
                                <i class="fa-solid fa-money-bill"></i>
                            </span>

                            @Html.EditorFor(model => model.CantidadCierreAnio, new { htmlAttributes = new { @class = "form-control", @placeholder = "0.00" } })
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-12 col-sm-12  col-md-4 col-lg-4">
                        @Html.Label("Monto de cierre del año", new { @class = "form-label" })
                        <div class="input-group input-group-lg mb-3">
                            <span class="input-group-text">
                                <i class="fa-solid fa-money-bill"></i>
                            </span>
                            @Html.EditorFor(model => model.MontoCierreAnio, new { htmlAttributes = new { @class = "form-control", @placeholder = "0.00" } })
                        </div>
                    </div>
                }*@
                                    <div class="col-12 col-sm-12  col-md-4 col-lg-4 order-2">
                                        @if (Model.idCatTiposMedicion == 1)
                                        {

                                            @*<div class="col-12 col-sm-12  col-md-4 col-lg-4" id="container-cMensual">*@
                                            @Html.Label("Cantidad de meta mensual para la Sucursal *", new { @class = "form-label text-success cantidad-sucursal" })
                                            @Html.Label("Cantidad de meta mensual para cada ejecutivo", new { @class = "form-label cantidad-ejecutivo" })
                                            <div class="input-group input-group-lg mb-3">
                                                <span class="input-group-text">
                                                    <i class="align-middle me-2 fas fa-fw fa-clipboard-check"></i>
                                                </span>

                                                @Html.EditorFor(model => model.cantidadMetaMensual, new { htmlAttributes = new { @class = "form-control", @placeholder = "0" } })
                                                @Html.ValidationMessageFor(model => model.cantidadMetaMensual, "", new { @class = "text-danger" })
                                            </div>
                                            @*</div>*@
                                        }
                                        else
                                        {

                                            @*<div class="col-12 col-sm-12  col-md-4 col-lg-4" id="container-mMensual">*@
                                            @Html.Label("Monto de meta mensual para la sucursal", new { @class = "form-label text-success monto-sucursal" })
                                            @Html.Label("Monto de meta mensual para cada ejecutivo", new { @class = "form-label monto-ejecutivo" })
                                            <div class="input-group input-group-lg mb-3">
                                                <span class="input-group-text">
                                                    <i class="fa-solid fa-money-bill"></i>
                                                </span>

                                                @Html.EditorFor(model => model.metasMensual, new { htmlAttributes = new { @class = "form-control", @placeholder = "0.00" } })
                                                @Html.ValidationMessageFor(model => model.metasMensual, "", new { @class = "text-danger" })
                                            </div>
                                            @*</div>*@
                                        }
                                    </div>


                                    <div class="col-12 col-sm-12  col-md-4 col-lg-4 text-end order-3">
                                        @Html.Label("boton agregar", new { @class = "form-label text-white" })
                                        <div class="input-group input-group-lg mb-3 row">
                                            <!--button -->
                                            <div class="btn-group " role="group" aria-label="Basic example">
                                                <button type="button" class="btn btn-primary btn-lg" id="agregar-sucursal" style="background-color: #153d77 !important;">Agregar</button>
                                                <button type="button" class="btn btn-danger btn-lg" id="eliminar-todo">Eliminar</button>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                                <div class="mx-2 my-1 text-center">
                                    <div class="btn-group" role="group" id="container-meses" aria-label="Basic example">

                                    </div>
                                </div>
                                <div class="d-flex justify-content-center mt-3">
                                    <div class="col-4">
                                        <div class="input-group input-group-lg mb-3">
                                            <input type="text" id="filtro" class="form-control" placeholder="Filtrar Registros">
                                            <span class="input-group-text">
                                                <i class="align-middle me-2 fas fa-fw fa-search"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>


                                <br />
                                <div class="row px-1 px-sm-1 px-md-3 px-lg-4">
                                    <table class="table" id="datatables-reponsive">
                                        <thead>
                                            <tr class="small">
                                                <th class="filtro-col" data-filtro="Region" style="width:10%;">Region</th>
                                                <th class="filtro-col" data-filtro="Sucursal" style="width:15%;">Sucursal</th>
                                                <th class="filtro-col" data-filtro="Producto" style="width:25%;">Producto</th>
                                                <th class="filtro-col" data-filtro="Monto" style="width:10%;">Monto Meta Mensual</th>
                                                <th class="filtro-col" data-filtro="Cantidad" style="width:10%;">Cantidad Meta Mensual</th>
                                                <th class="filtro-col" data-filtro="Mes" style="width:10%;">Mes</th>
                                                <th class="filtro-col" data-filtro="Anio" style="width:10%;">Año</th>
                                                <th class="filtro-col" data-filtro="Acciones" style="width:10%;">Acciones</th>
                                            </tr>
                                        </thead>
                                        <tbody class="small" id="tbody-asignaciones">
                                        </tbody>
                                    </table>


                                </div>
                                <br />

                            }
                            <!-- Modal -->
                            <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" data-bs-backdrop="static" data-bs-keyboard="false" aria-hidden="true">
                                <div class="modal-dialog modal-xl">
                                    <div class="modal-content">
                                        <div class="modal-header" style="background: #0c4899 !important;">
                                            <h5 class="modal-title text-white" id="exampleModalLabel"><i class="fa-solid fa-user-tie"></i> Asignación de Metas por Colaborador</h5>
                                            <button type="button" class="btn-close btn-close-white" id="cerrar-modal" data-bs-dismiss="modal" aria-label="Close"></button>

                                        </div>
                                        <div class="modal-body" id="modal-metas">

                                        </div>

                                    </div>
                                </div>
                            </div>
                            <!-- fin modal -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    document.addEventListener("DOMContentLoaded", function (event) {

        $('#filtro').on('input', function () {
            var filtro = $(this).val().toLowerCase();
            $('table tbody tr:not(.total-fila)').each(function () {
                var texto = $(this).text().toLowerCase();
                if (texto.indexOf(filtro) !== -1) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            }).promise().done(function () {
               
                calcularTotales();
            });
        });

        //$("#dist-ejecutivo").hide();
        //$("#dist-sucursal").hide();
        /**/

        $(".cantidad-ejecutivo").hide();
        $(".monto-ejecutivo").hide();

        $("#metasMensual").on({
            "focus": function (event) {
                $(event.target).select();
            },
            "keyup": function (event) {
                $(event.target).val(function (index, value) {
                    return value.replace(/\D/g, "")
                        .replace(/([0-9])([0-9]{2})$/, '$1.$2')
                        .replace(/\B(?=(\d{3})+(?!\d)\.?)/g, ",");
                });
            }
        });
        $("#MontoCierreAnio").on({
            "focus": function (event) {
                $(event.target).select();
            },
            "keyup": function (event) {
                $(event.target).val(function (index, value) {
                    return value.replace(/\D/g, "")
                        .replace(/([0-9])([0-9]{2})$/, '$1.$2')
                        .replace(/\B(?=(\d{3})+(?!\d)\.?)/g, ",");
                });
            }
        });
        /*se aplica el select*/
        $('#idCatUbicaciones').select2({
            theme: 'bootstrap-5'
        });
        $('#idCatTipificacionProductos').select2({
            theme: 'bootstrap-5'
        });
        $('#idTblProductosCooitza').select2({
            theme: 'bootstrap-5'
        });
        $('#idCatMeses').select2({
            theme: 'bootstrap-5'
        });
        $('#idCatAnios').select2({
            theme: 'bootstrap-5'
        });
        getMesesMetas();//<------ se llama la funcion para pintar los meses

        /* - - - - - - - - - - funcion para pintar datos en tabla*/
        function pintarDatosEnTabla(data) {
            return new Promise((resolve, reject) => {

                $("#tbody-asignaciones").html('');//limiar el tbody
                $.each(data, function (key, item) {
                    var html = '';
                    html += '<tr>';
                    html += '<td>' + item.Region + '</td>';
                    html += '<td>' + item.Sucursal + '</td>';
                    html += '<td>' + item.Producto + '</td>';
                    html += '<td class="fw-bold">' + item.MontoMetaMensual + '</td>';
                    html += '<td class="fw-bold">' + item.CantidadMetaMensual + '</td>';
                    html += '<td>' + item.Mes + '</td>';
                    html += '<td>' + item.Anio + '</td>';
                    html += `<td class="table-action">
                                        <div class="row">
                                            <div class="col-6">
                                                <a href="#" id="eliminar-meta-sucursal" codigo="${item.idTblSucrusalesProductosCooitza}">
                                                    <div class="row">
                                                        <i class="align-middle fas fa-fw fa-trash"></i>
                                                    </div>
                                                    <div class="row">
                                                        Eliminar
                                                    </div>
                                                </a>
                                            </div>
                                            <div class="col-6">
                                                <!---->
                                                <a href="#" id="asignar-meta-empleado" codigo="${item.idTblSucrusalesProductosCooitza}" data-bs-toggle="modal" data-bs-target="#exampleModal">
                                                    <div class="row">
                                                        <i class="align-middle me-2 fas fa-fw fa-allergies"></i>
                                                    </div>
                                                    <div class="row">
                                                        Asignar
                                                    </div>
                                                </a>
                                            </div>
                                        </div>
                                    </td>`;
                    html += '</tr>';
                    $("#tbody-asignaciones").append(html);
                });
                
                
                // Resolver la promesa cuando se hayan pintado los datos en la tabla
                resolve();
                var html = '';
                html += '<tr class="fw-bold total-fila">';
                html += '<td>Totales:</td>';
                html += '<td></td>';
                html += '<td></td>';
                html += '<td>Q0.00</td>';
                html += '<td>0</td>';
                html += '<td></td>';
                html += '<td></td>';
                html += '<td></td>';
                html += '</tr>';
                $("#tbody-asignaciones").append(html);
                // Calcular los totales
                calcularTotales();
            });
        }


        function calcularTotales() {
            // Obtener todas las filas visibles de la tabla
            //var filas = $("#tbody-asignaciones tr:visible");
            var filas = $("#tbody-asignaciones tr:visible").not(".total-fila");
            // Obtener el total de la columna "MontoMetaMensual"
            var totalMonto = 0;
            filas.each(function () {
                var monto = parseFloat($(this).find("td:nth-child(4)").text().replace(/[\sQ,]/g, ''));
                if (!isNaN(monto)) {
                    totalMonto += monto;
                }
            });

            // Obtener el total de la columna "CantidadMetaMensual"
            var totalCantidad = 0;
            filas.each(function () {
                var cantidad = parseInt($(this).find("td:nth-child(5)").text());
                if (!isNaN(cantidad)) {
                    totalCantidad += cantidad;
                }
            });


            var totalFila = $("#tbody-asignaciones").find(".total-fila");
            if (totalFila.length) {
                // Si ya existe, actualizar los totales

                totalFila.find("td:nth-child(4)").text(totalMonto.toLocaleString('es-GT', { style: 'currency', currency: 'GTQ' }));
                totalFila.find("td:nth-child(5)").text(totalCantidad);
            } else {
                // Si no existe, agregar una nueva fila de totales
               
            }
        }

            
        /*mostrar los input de monto o cantidad para los ejecutivos */
        $("#idCatTiposDistribuciones").change(function () {

            var id = parseInt($("#idCatTiposDistribuciones").val());
            if (id == 1)
            {
                $(".cantidad-ejecutivo").show();
                $(".monto-ejecutivo").show();
                $(".monto-sucursal").hide();
                $(".cantidad-sucursal").hide();
                //$("#espacio-sin-asignar").hide();
            }
            else
            {
                $(".cantidad-ejecutivo").hide();
                $(".monto-ejecutivo").hide();
                $(".monto-sucursal").show();
                $(".cantidad-sucursal").show();
            }
        })
        $("#agregar-sucursal").on('click', function (e) {
        //$(document).on('click', '#agregar-sucursal', function () {
        var idTblAsignaciones = $("#idTblAsignaciones").val();
        var cantidadMetaMensual = $("#cantidadMetaMensual").val();
        var metasMensual = $("#metasMensual").val();
        var idTblProductosCooitza = $("#idTblProductosCooitza").val();
        var idCatUbicaciones = $("#idCatUbicaciones").val();
        var idCatAnios = $("#idCatAnios").val();
        var idCatMeses = $("#idCatMeses").val();
        var idCatTiposMedicion = $("#idCatTiposMedicion").val();
        var idCatTiposDistribuciones = $("#idCatTiposDistribuciones").val();
        var tblSucrusalesProductosCooitza =
        {
            idTblAsignaciones: idTblAsignaciones,
            cantidadMetaMensual: cantidadMetaMensual,
            metasMensual: metasMensual,
            idTblProductosCooitza: idTblProductosCooitza,
            idCatUbicaciones: idCatUbicaciones,
            idCatAnios: idCatAnios,
            idCatMeses: idCatMeses,
            idCatTiposMedicion: idCatTiposMedicion,
            idCatTiposDistribuciones: idCatTiposDistribuciones
        };
        //console.log(tblSucrusalesProductosCooitza);
        e.preventDefault();
        var btn = $(this);
        if (!btn.hasClass('disabled')) {
            async function myAjax(param) {
                let result
                try {
                  result = await $.ajax({
                    url: '@Url.Action("Create", "TblSucrusalesProductosCooitzas")',
                    type: 'POST',
                    data: param,
                    beforeSend: function(response) {
                        var idSucu = $("#idCatTiposDistribuciones").val();
                        if (idSucu != ''){
                            let timerInterval
                            Swal.fire({
                            title: 'Creando registros',
                            html: 'Por favor espere mientras se guarda la informacion',
                            allowOutsideClick: false,
                            timerProgressBar: true,
                            didOpen: () => {
                                Swal.showLoading()
                            },
                            willClose: () => {
                                clearInterval(timerInterval)
                            }
                            }).then((result) => {
                            /* Read more about handling dismissals below */
                            if (result.dismiss === Swal.DismissReason.timer) {
                                console.log('I was closed by the timer')
                            }
                            })
                        }
                        //btn.toggleClass('disabled');
                        response.setRequestHeader("If-Modified-Since", "0");
                        response.setRequestHeader("Cache-Control", "no-cache");
                    },
                  })
                  return result
                } catch (error) {
                  console.error(error)
                }
              }
        //return false;
        myAjax(tblSucrusalesProductosCooitza).then((data) => {
            console.info('Response:', data)
            btn.removeClass('disabled');
            swal.close();
            console.log(data.Descripcion);
            //var idCatMeses = data.IdCatMeses; //para seleccionar enero
            //var idCatAnios = $("#idCatAnios").val();
            //var idTblProductosCooitza = $("#idTblProductosCooitza").val();
            $("#cantidadMetaMensual").val('');
            $("#metasMensual").val('');
            if (data.Codigo == 1) {
                toastr.success('Meta asignada con exito!');
                //$('a.nav-link.active').attr('value');
                //this will select your first tab
                btn.removeClass('disabled');

                //getMesesMetas(idCatMeses); //llamado a los meses

                //getSucursalesMetas(@Model.idTblAsignaciones, idCatMeses, idCatAnios, idTblProductosCooitza);
                /* - - - - - - - inicia la llamada a las asignaciones - - - - - - - */
                 // aqui se declara la url de la peticion
                var url = '@Url.Action("GetSucursalesMetas", "TblSucrusalesProductosCooitzas")';
                var idTblAsignaciones = document.getElementById("idTblAsignaciones").value;
                var idCatMeses = data.IdCatMeses;//retorna el response
                var idCatAnios = document.getElementById("idCatAnios").value;
                var idTblProductosCooitza = document.getElementById("idTblProductosCooitza").value;
                //qui se declara el objeto data que forma parte del objeto opciones
                var data = {
                    idCatMeses: idCatMeses,
                    idTblAsignaciones: idTblAsignaciones,
                    idCatAnios: idCatAnios,
                    idTblProductosCooitza: idTblProductosCooitza
                };
                getSucursalesMetas(url, data, function (opciones) {

                    return opciones;
                })
                .then(function (respuesta) {

                        console.log(respuesta);
                        if (respuesta.Codigo == 1) {
                            console.log(respuesta)
                            console.log(respuesta.Responses)
                            // Llamar a la función pintarDatosEnTabla y cerrar la alerta cuando haya terminado
                            pintarDatosEnTabla(respuesta.Responses).then(() => {
                                swal.close();
                            });
                        } else {
                            toastr.success(respuesta.Descripcion);
                            swal.close();
                        }
                    })
                 .catch(function (error) {
                        console.error(error);
                 });

                /* - - - - - - - finaliza la llamada a las asignaciones - - - - - - - */




             }else {
                btn.removeClass('disabled');
                toastr.error(data.Descripcion);
             }

          })

        }
        else
        {
            return false;
        }
        });


        function getSucursalesMetas(url, data, beforeSendCallback) {
            //  - - - - -  show loading animation
            let timerInterval
            Swal.fire({
                title: 'Cargando los registros',
                html: 'Por favor espere mientras se cargan los registros',
                allowOutsideClick: false,
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading()
                },
                willClose: () => {
                    clearInterval(timerInterval)
                }
            }).then((result) => {
                /* Read more about handling dismissals below */
                if (result.dismiss === Swal.DismissReason.timer) {
                    console.log('I was closed by the timer')
                }
            })
            // - - - - - show loading animation fin codigo
            // Configurar opciones de solicitud
            // aqui se declara el objeto opciones el cual se enviara dentro de la funcion enviarSolicitud
            let opciones = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            };
            // Si se proporciona una función beforeSendCallback, llámala antes de enviar la solicitud
            if (beforeSendCallback && typeof beforeSendCallback === 'function') {
                opciones = beforeSendCallback(opciones);
            }
            // Enviar solicitud
            return fetch(url, opciones)
                .then(function (response) {
                    if (!response.ok) {
                        console.log('Error al enviar la solicitud');
                        toastr.success('ocurrio un error al enviar la solicitud recarga la pagina');
                    }
                    swal.close();
                    // Ocultar animación de carga
                    // document.getElementById('loader').style.display = 'none';

                    return response.json();
                })
                .catch(function (error) {
                    console.long(error);
                    toastr.success('ocurrio un error inesperado al cargar la informacion recarga la pagina');
                    swal.close();
                    // Ocultar animación de carga
                    //document.getElementById('loader').style.display = 'none';
                });
        }

        function getMesesMetas(numero) {
            // Realizamos la petición fetch via POST
            fetch('@Url.Action("GetMesesMetas","TblSucrusalesProductosCooitzas")', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              }
            })
            .then(response => response.json())
            .then(data => {
                console.log(data);
                const promesaPintarMeses = pintarMeses(data.Listado);
                promesaPintarMeses.then(() => {
                    /*cuando lo promesa se devuelva correctamente*/
                    console.log('La promesa PintarMeses se resolvió correctamente');
                    /* promesa resuleta*/

                        // aqui se declara la url de la peticion
                        var url = '@Url.Action("GetSucursalesMetas", "TblSucrusalesProductosCooitzas")';
                    // aqui se obtienen los valores de los input para despues armar el objeto con la data
                        var idCatMeses = data.IdCatMeses;//para seleccionar enero
                        var idTblAsignaciones = document.getElementById("idTblAsignaciones").value;
                        var idCatAnios = document.getElementById("idCatAnios").value;
                        var idTblProductosCooitza = document.getElementById("idTblProductosCooitza").value;
                        //qui se declara el objeto data que forma parte del objeto opciones
                        var content = {
                            idCatMeses:idCatMeses,
                            idTblAsignaciones:idTblAsignaciones,
                            idCatAnios:idCatAnios,
                            idTblProductosCooitza:idTblProductosCooitza
                        };
                    //se llama a la funion enviarSolicitud
                    getSucursalesMetas(url, content ,function(opciones) {

    	                return opciones;
                    })
                    .then(function(respuesta) {

    	                console.log(respuesta);
                        if (respuesta.Codigo == 1) {
                            console.log(respuesta)
                            console.log(respuesta.Responses)
                            // Llamar a la función pintarDatosEnTabla y cerrar la alerta cuando haya terminado
                            pintarDatosEnTabla(respuesta.Responses).then(() => {
                                swal.close();
                            });
    	                } else {
                            toastr.success(respuesta.Descripcion);
    		                swal.close();
    	                }
                    })
                    .catch(function(error) {
                        toastr.success('ocurrio un error al obtener la respuesta recarga la pagina porfavor');
                        console.log(error);
                    });

                }).catch((error) => {
                    console.error('La promesa para pintarMeses falló con el siguiente error:', error);
                });

            })
            .catch(error => {
              console.error('Error en la petición:', error);
            });
        }

        /* - - - - - - - - - - funcion para pintar los meses*/
        function pintarMeses(data) {
            return new Promise((resolve, reject) => {
                $("#container-meses").html('');//limiar el tbody
                $.each(data, function (key, item) {
                    var html = '';
                    html += `<button type="button" class="btn btn-dark" id="btn-mes" codigo="${item.IdCatMeses}"><i class="align-middle me-2 fas fa-fw fa-calendar"></i>${item.Descripcion}</button>`;
                    $("#container-meses").append(html);
                });
                // Resolver la promesa cuando se hayan pintado los datos en la tabla
                resolve();
            });
        }

        $(document).on('click', '#eliminar-todo', function() {
          var codigo = $("#idTblAsignaciones").val();
          //alert(codigo);
          Swal.fire({
            icon: 'warning',
            title: '¿Se borraran todas las sucursales asignadas?',
            showConfirmButton: true,
            confirmButtonText: 'ELIMINAR',
            confirmButtonColor: '#3085d6',
            showCancelButton: true,
            cancelButtonText: 'CANCELAR',
            cancelButtonColor: '#d33',
            buttonsStyling: true,
          }).then((result) => {
            if (result.isConfirmed) {
              Pace.track(function() {
                $.ajax({
                  type: 'POST',
                  url: '@Url.Action("DeleteAll", "TblAsignaciones")',
                  data: {
                    id: codigo
                  },
                  success: function(response) {
                    console.log(response.data)
                    if (response.data.Codigo == 1) {
                      toastr.success('Registros eliminados con exito!');
                        /*
                         * Para este caso se eliminan todas las asignaciones
                         * entonces es mejor cargar de nuevo la barra de los meses
                         * porque esa funcion nos brinda el idCatMeses actual y de una vez manda
                         * a llamar a la funcion getsucursales con el mes atual
                         * como todo estara vacio no cargara nada para el mes actual
                         */

                        getMesesMetas();//recordando que esta funcion hay que modificarla porqie no recibe ningun parametro pero funciona bien asi

                        /* - - - - - - - finaliza la llamada a las asignaciones - - - - - - - */
                    } else {
                      Swal.fire({
                        icon: 'error',
                        title: 'Ocurrio un error al eliminar el registro',
                        text: response.data
                      })
                    }
                  },
                  always: function(response) {
                    $("#cantidadMetaMensual").val('');
                    $("#metasMensual").val('');
                    //$('#idCatUbicaciones').val(0).trigger("change");
                    $('#idCatUbicaciones').val('');
                    $('#idCatTiposDistribuciones').val('');

                    $("#dist-ejecutivo").hide();
                    $("#espacio-sin-asignar").show();
                    $("#cantidadMetaMensual").val('');
                    $("#metasMensual").val('');
                  }
                });
              });

            }
          });
        });

        $(document).on('click', '#eliminar-meta-sucursal', function () {
             var codigo = $(this).attr('codigo');
             //alert(codigo);
             Swal.fire({
                    icon: 'warning',
                    title: '¿Estás seguro/a de eliminar a este registro?',
                    showConfirmButton: true,
                    confirmButtonText: 'ELIMINAR',
                    confirmButtonColor: '#3085d6',
                    showCancelButton: true,
                    cancelButtonText: 'CANCELAR',
                    cancelButtonColor: '#d33',
                    buttonsStyling: true,
                }).then((result) => {
                    if (result.isConfirmed) {
                        Pace.track(function () {
                            $.ajax({
                            type: 'POST',
                            url: '@Url.Action("DeleteConfirmed", "TblSucrusalesProductosCooitzas")',
                            data: {
                                id: codigo
                            },
                            success: function (response) {
                                console.log(response.data)
                                if (response.data.Codigo == 1) {
                                    toastr.success('Registro eliminado con exito!');

                                    //getMesesMetas(idCatMeses);//llamado a los meses

                                    var url = '@Url.Action("GetSucursalesMetas", "TblSucrusalesProductosCooitzas")';
                                    var idTblAsignaciones = document.getElementById("idTblAsignaciones").value;
                                    var idCatMeses = response.data.IdCatMeses;//en el response regresa el mes trabajado
                                    var idCatAnios = document.getElementById("idCatAnios").value;
                                    var idTblProductosCooitza = document.getElementById("idTblProductosCooitza").value;
                                    //qui se declara el objeto data que forma parte del objeto opciones
                                    var data = {
                                        idCatMeses: idCatMeses,
                                        idTblAsignaciones: idTblAsignaciones,
                                        idCatAnios: idCatAnios,
                                        idTblProductosCooitza: idTblProductosCooitza
                                    };
                                    getSucursalesMetas(url, data, function (opciones) {

                                        return opciones;
                                    })
                                    .then(function (respuesta) {

                                            console.log(respuesta);
                                            if (respuesta.Codigo == 1) {
                                                console.log(respuesta)
                                                console.log(respuesta.Responses)
                                                // Llamar a la función pintarDatosEnTabla y cerrar la alerta cuando haya terminado
                                                pintarDatosEnTabla(respuesta.Responses).then(() => {
                                                    swal.close();
                                                });
                                            } else {
                                                toastr.success(respuesta.Descripcion);
                                                swal.close();
                                            }
                                        })
                                    .catch(function (error) {
                                            console.error(error);
                                     });
                                    //getSucursalesMetas(@Model.idTblAsignaciones, idCatMeses, idCatAnios)
                                }
                                else
                                {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Ocurrio un error al eliminar el registro',
                                        text: response.data
                                    })
                                }
                            }
                        });
                        });

                    }
             });
        });
        $(document).on('click', '#btn-mes', function (e) {

            var idCatMeses = $(this).attr('codigo');;
            e.preventDefault();
            var btn = $(this);
            if (!btn.hasClass('disabled'))
            {
                var url = '@Url.Action("GetSucursalesMetas", "TblSucrusalesProductosCooitzas")';
                var idCatMeses = idCatMeses;
                var idTblAsignaciones = document.getElementById("idTblAsignaciones").value;
                var idCatAnios = document.getElementById("idCatAnios").value;
                var idTblProductosCooitza = document.getElementById("idTblProductosCooitza").value;
                var data = {
                    idCatMeses:idCatMeses,
                    idTblAsignaciones:idTblAsignaciones,
                    idCatAnios:idCatAnios,
                    idTblProductosCooitza:idTblProductosCooitza
                };
                //se llama a la funion getSucursalesMetas
                getSucursalesMetas(url,data ,function(opciones) {

    	            return opciones;
                })
                .then(function(respuesta) {

    	            console.log(respuesta);
                    if (respuesta.Codigo == 1) {
                        console.log(respuesta)
                        console.log(respuesta.Responses)
                        // Llamar a la función pintarDatosEnTabla y cerrar la alerta cuando haya terminado
                        pintarDatosEnTabla(respuesta.Responses).then(() => {
                            swal.close();
                        });
    	            } else {
                        toastr.success(respuesta.Descripcion);
    		            swal.close();
    	            }
                })
                .catch(function(error) {
                    toastr.success('ocurrio un error al obtener la respuesta recarga la pagina porfavor');
                    console.log(error);
                });

            }
            else {

            return false;
            }
        });
        /*llamada al partial wiew editar*/
        $(document).on('click', '#asignar-meta-empleado', function () {
            var idTblSucrusalesProductosCooitza = $(this).attr('codigo');;
            $.ajax({
                   type: 'POST',
                   url: '@Url.Action("EditSucursal", "TblSucrusalesProductosCooitzas")',
                dataType:'html',
                data: { id: idTblSucrusalesProductosCooitza },
                beforeSend: function (response) {
                    $("#modal-metas").hide();
                },
                success: function (response) {
                    //console.log(response);
                    $("#modal-metas").html('');
                    $("#modal-metas").html(response);
                    $("#modal-metas").show();
                }
            });
        });
        $(document).on('click', '#cerrar-modal', function () {
            var url = '@Url.Action("GetSucursalesMetas", "TblSucrusalesProductosCooitzas")';
            var idCatMeses = document.querySelector('.idCatMesesModal').value;//para seleccionar el valor del mes en la modal que se cierra
            var idTblAsignaciones = document.getElementById("idTblAsignaciones").value;
            var idCatAnios = document.getElementById("idCatAnios").value;
            var idTblProductosCooitza = document.getElementById("idTblProductosCooitza").value;
            var data = {
                idCatMeses:idCatMeses,
                idTblAsignaciones:idTblAsignaciones,
                idCatAnios:idCatAnios,
                idTblProductosCooitza:idTblProductosCooitza
            };
            getSucursalesMetas(url, data, function (opciones) {

                return opciones;
            })
            .then(function (respuesta) {

                    console.log(respuesta);
                    if (respuesta.Codigo == 1) {
                        console.log(respuesta)
                        console.log(respuesta.Responses)

                        pintarDatosEnTabla(respuesta.Responses).then(() => {
                            swal.close();
                            $("#modal-metas").html('');
                        });
                    } else {
                        toastr.success(respuesta.Descripcion);
                        swal.close();
                    }
             })
            .catch(function (error) {
                    console.error(error);
            });
        });

    });
</script>